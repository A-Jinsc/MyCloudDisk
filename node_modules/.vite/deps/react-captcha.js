import {
  __commonJS,
  require_react
} from "./chunk-I4MZPW7S.js";

// node_modules/react-script-loader/ReactScriptLoader.js
var require_ReactScriptLoader = __commonJS({
  "node_modules/react-script-loader/ReactScriptLoader.js"(exports) {
    var scriptObservers = {};
    var loadedScripts = {};
    var erroredScripts = {};
    var idCount = 0;
    var ReactScriptLoader = {
      componentDidMount: function(key, component, scriptURL) {
        if (typeof component.onScriptLoaded !== "function") {
          throw new Error("ScriptLoader: Component class must implement onScriptLoaded()");
        }
        if (typeof component.onScriptError !== "function") {
          throw new Error("ScriptLoader: Component class must implement onScriptError()");
        }
        if (loadedScripts[scriptURL]) {
          component.onScriptLoaded();
          return;
        }
        if (erroredScripts[scriptURL]) {
          component.onScriptError();
          return;
        }
        if (scriptObservers[scriptURL]) {
          scriptObservers[scriptURL][key] = component;
          return;
        }
        var observers = {};
        observers[key] = component;
        scriptObservers[scriptURL] = observers;
        var script = document.createElement("script");
        script.src = scriptURL;
        var callObserverFuncAndRemoveObserver = function(func) {
          var observers2 = scriptObservers[scriptURL];
          for (var key2 in observers2) {
            observer = observers2[key2];
            var removeObserver = func(observer);
            if (removeObserver) {
              delete scriptObservers[scriptURL][key2];
            }
          }
        };
        script.onload = function() {
          loadedScripts[scriptURL] = true;
          callObserverFuncAndRemoveObserver(function(observer2) {
            if (observer2.deferOnScriptLoaded && observer2.deferOnScriptLoaded()) {
              return false;
            }
            observer2.onScriptLoaded();
            return true;
          });
        };
        script.onerror = function(event) {
          erroredScripts[scriptURL] = true;
          callObserverFuncAndRemoveObserver(function(observer2) {
            observer2.onScriptError();
            return true;
          });
        };
        document.body.appendChild(script);
      },
      componentWillUnmount: function(key, scriptURL) {
        var observers = scriptObservers[scriptURL];
        if (observers) {
          delete observers[key];
        }
      },
      triggerOnScriptLoaded: function(scriptURL) {
        if (!loadedScripts[scriptURL]) {
          throw new Error("Error: only call this function after the script has in fact loaded.");
        }
        var observers = scriptObservers[scriptURL];
        for (var key in observers) {
          var observer2 = observers[key];
          observer2.onScriptLoaded();
        }
        delete scriptObservers[scriptURL];
      }
    };
    var ReactScriptLoaderMixin = {
      componentDidMount: function() {
        if (typeof this.getScriptURL !== "function") {
          throw new Error("ScriptLoaderMixin: Component class must implement getScriptURL().");
        }
        ReactScriptLoader.componentDidMount(this.__getScriptLoaderID(), this, this.getScriptURL());
      },
      componentWillUnmount: function() {
        ReactScriptLoader.componentWillUnmount(this.__getScriptLoaderID(), this.getScriptURL());
      },
      __getScriptLoaderID: function() {
        return "id" + idCount++;
      }
    };
    exports.ReactScriptLoaderMixin = ReactScriptLoaderMixin;
    exports.ReactScriptLoader = ReactScriptLoader;
  }
});

// node_modules/react-captcha/index.js
var require_react_captcha = __commonJS({
  "node_modules/react-captcha/index.js"(exports, module) {
    var React = require_react();
    var ReactScriptLoaderMixin = require_ReactScriptLoader().ReactScriptLoaderMixin;
    var Captcha = React.createClass({
      displayName: "Captcha",
      mixins: [ReactScriptLoaderMixin],
      getInitialState: function getInitialState() {
        return {
          scriptLoading: true,
          scriptLoadError: false
        };
      },
      componentDidMount: function componentDidMount() {
        var sitekey = this.props.sitekey;
        var theme = this.props.theme;
        var type = this.props.type;
        var callback = this.props.callback;
        window.onloadCallback = function() {
          grecaptcha.render("captcha", {
            "sitekey": sitekey,
            "callback": callback,
            "theme": theme,
            "type": type
          });
        };
      },
      getScriptURL: function getScriptURL() {
        return "https://www.google.com/recaptcha/api.js?onload=onloadCallback&hl=" + this.props.lang + "&render=explicit&rnd=" + Math.random();
      },
      onScriptLoaded: function onScriptLoaded() {
        this.setState({ scriptLoading: false });
      },
      onScriptError: function onScriptError() {
        this.setState({ scriptLoading: false, scriptLoadError: true });
      },
      render: function render() {
        if (this.state.scriptLoadError) {
          console.log("loading failed");
        }
        return React.createElement("div", { className: "g-recaptcha", id: "captcha" });
      }
    });
    module.exports = Captcha;
  }
});
export default require_react_captcha();
//# sourceMappingURL=react-captcha.js.map
