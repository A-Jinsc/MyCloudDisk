import {
  __assign,
  __extends,
  constant,
  isBlob,
  isString,
  noop,
  uniqueId
} from "./chunk-BNL6YVI4.js";

// node_modules/util-helpers/esm/utils/setup.js
var URLExisted = typeof URL !== "undefined";

// node_modules/util-helpers/esm/utils/native.js
var objectKeys = Object.keys;
var objectValues = Object.values;
var createObjectURL = URLExisted ? URL.createObjectURL : constant("");
var revokeObjectURL = URLExisted ? URL.revokeObjectURL : noop;

// node_modules/util-helpers/esm/ajax.js
function ajax(url, options) {
  var _a = options || {}, _b = _a.method, method = _b === void 0 ? "get" : _b, _c = _a.data, data = _c === void 0 ? null : _c, timeout = _a.timeout, headers = _a.headers, _d = _a.withCredentials, withCredentials = _d === void 0 ? false : _d, _e = _a.async, async = _e === void 0 ? true : _e, _f = _a.user, user = _f === void 0 ? null : _f, _g = _a.password, password = _g === void 0 ? null : _g, responseType = _a.responseType, onReadyStateChange = _a.onReadyStateChange, onLoadStart = _a.onLoadStart, onProgress = _a.onProgress, onAbort = _a.onAbort, onTimeout = _a.onTimeout, onError = _a.onError, onLoad = _a.onLoad, onLoadEnd = _a.onLoadEnd;
  return new Promise(function(resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.open(method.toLowerCase(), url, async, user, password);
    if (onReadyStateChange) {
      xhr.onreadystatechange = onReadyStateChange;
    }
    if (typeof timeout === "number" && timeout > 0) {
      xhr.timeout = timeout;
    }
    xhr.withCredentials = withCredentials;
    if (responseType) {
      xhr.responseType = responseType;
    }
    if (typeof headers === "object") {
      objectKeys(headers).map(function(item) {
        xhr.setRequestHeader(item, headers[item]);
      });
    }
    var wrapSuccess = function(cb) {
      return function(e) {
        resolve(e);
        cb === null || cb === void 0 ? void 0 : cb.call(xhr, e);
      };
    };
    var wrapError = function(cb) {
      return function(e) {
        reject(e);
        cb === null || cb === void 0 ? void 0 : cb.call(xhr, e);
      };
    };
    var events = {
      loadstart: onLoadStart,
      progress: onProgress,
      abort: wrapError(onAbort),
      timeout: wrapError(onTimeout),
      error: wrapError(onError),
      load: wrapSuccess(onLoad),
      loadend: onLoadEnd
    };
    var eventKeys = objectKeys(events);
    eventKeys.map(function(item) {
      var func = events[item];
      if (func) {
        xhr.addEventListener(item, func);
      }
    });
    xhr.send(data);
  });
}

// node_modules/util-helpers/esm/getFileBlob.js
var SuccessResponseStatus = [200, 304];
function getFileBlob(file, ajaxOptions) {
  return new Promise(function(resolve, reject) {
    if (isBlob(file)) {
      resolve(file);
    } else {
      ajax(file, __assign({ responseType: "blob" }, ajaxOptions)).then(function(ev) {
        var responseStatus = ev.target.status;
        if (SuccessResponseStatus.indexOf(responseStatus) !== -1) {
          resolve(ev.target.response);
        } else {
          var err = new Error("The file does not support get requests, responseStatus ".concat(responseStatus, ", '").concat(file, "'."));
          console.error(err);
          reject(err);
        }
      }).catch(function(err) {
        console.error(new Error("Failed to request file. ".concat(err)));
        reject(err);
      });
    }
  });
}

// node_modules/util-helpers/esm/loadImage.js
function loadImage(img) {
  return new Promise(function(resolve, reject) {
    var imgIsBlob = isBlob(img);
    var url = imgIsBlob ? createObjectURL(img) : img;
    var image = new Image();
    if (!imgIsBlob) {
      image.crossOrigin = "anonymous";
    }
    image.onload = function() {
      resolve(image);
    };
    image.onerror = function(err) {
      if (imgIsBlob) {
        revokeObjectURL(url);
      }
      console.error("[loadImage] The image load failed, '".concat(img, "'."));
      reject(err);
    };
    image.src = url;
  });
}

// node_modules/util-helpers/esm/loadImageWithBlob.js
function loadImageWithBlob(img, ajaxOptions) {
  return getFileBlob(img, ajaxOptions).then(function(blob) {
    return loadImage(blob).then(function(image) {
      return { blob, image };
    });
  });
}

// node_modules/emitter-pro/dist/emitter-pro.esm.js
var EmitterPro = (
  /** @class */
  function() {
    function EmitterPro2() {
      this.handlers = {};
    }
    EmitterPro2.prototype.eventNames = function() {
      var _a;
      var symbols = ((_a = Object.getOwnPropertySymbols) === null || _a === void 0 ? void 0 : _a.call(Object, this.handlers)) || [];
      var keys = Object.keys(this.handlers);
      return keys.concat(symbols);
    };
    EmitterPro2.prototype.rawListeners = function(eventName) {
      var handler = this.handlers[eventName];
      return handler ? handler.map(function(item) {
        return item.raw;
      }) : [];
    };
    EmitterPro2.prototype.listeners = function(eventName) {
      var handler = this.handlers[eventName];
      return handler ? handler.map(function(item) {
        return item.wrap;
      }) : [];
    };
    EmitterPro2.prototype.hasListener = function(eventName, listener) {
      return this.rawListeners(eventName).some(function(item) {
        return item === listener;
      });
    };
    EmitterPro2.prototype._on = function(eventName, raw, wrap, context, dir) {
      if (context === void 0) {
        context = null;
      }
      if (dir === void 0) {
        dir = 1;
      }
      var currentListener = { raw, wrap, context };
      if (!this.handlers[eventName]) {
        this.handlers[eventName] = [currentListener];
      } else {
        var appendMethod = dir === 1 ? "push" : "unshift";
        this.handlers[eventName][appendMethod](currentListener);
      }
      return this;
    };
    EmitterPro2.prototype.prependListener = function(eventName, listener, context) {
      return this._on(eventName, listener, listener, context, 0);
    };
    EmitterPro2.prototype.on = function(eventName, listener, context) {
      return this._on(eventName, listener, listener, context);
    };
    EmitterPro2.prototype._wrapOnce = function(eventName, listener, context) {
      var _this = this;
      if (context === void 0) {
        context = null;
      }
      var wrap = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        listener.apply(context, args);
        _this.off(eventName, wrap);
      };
      return wrap;
    };
    EmitterPro2.prototype.once = function(eventName, listener, context) {
      var wrap = this._wrapOnce(eventName, listener, context);
      return this._on(eventName, listener, wrap, context);
    };
    EmitterPro2.prototype.prependOnceListener = function(eventName, listener, context) {
      var wrap = this._wrapOnce(eventName, listener, context);
      return this._on(eventName, listener, wrap, context, 0);
    };
    EmitterPro2.prototype.off = function(eventName, listener) {
      var handler = this.handlers[eventName];
      if (handler) {
        if (listener) {
          var index = handler.findIndex(function(item) {
            return item.wrap === listener || item.raw === listener;
          });
          if (index !== -1) {
            handler.splice(index, 1);
          }
        } else {
          delete this.handlers[eventName];
        }
      }
      return this;
    };
    EmitterPro2.prototype.offAll = function() {
      this.handlers = {};
      return this;
    };
    EmitterPro2.prototype.emit = function(eventName) {
      var args = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
      }
      var handler = this.handlers[eventName];
      if (handler && handler.length > 0) {
        handler.forEach(function(listener) {
          listener.wrap.apply(listener.context, args);
        });
        return true;
      }
      return false;
    };
    return EmitterPro2;
  }()
);

// node_modules/cache2/dist/cache2.esm.js
var cache = {};
var MemoryStorage = (
  /** @class */
  function() {
    function MemoryStorage2(scope) {
      if (scope === void 0) {
        scope = "default";
      }
      this.scope = scope;
      if (!cache[this.scope]) {
        cache[this.scope] = {};
      }
      this.data = cache[this.scope];
    }
    MemoryStorage2.prototype.getItem = function(key) {
      return key in this.data ? this.data[key] : null;
    };
    MemoryStorage2.prototype.setItem = function(key, value) {
      this.data[key] = value;
    };
    MemoryStorage2.prototype.removeItem = function(key) {
      delete this.data[key];
    };
    MemoryStorage2.prototype.clear = function() {
      cache[this.scope] = {};
      this.data = cache[this.scope];
    };
    return MemoryStorage2;
  }()
);
function randomString() {
  return Math.random().toString(16).substring(2, 8);
}
function isStorageSupported(storage) {
  try {
    var isSupport = typeof storage === "object" && storage !== null && !!storage.setItem && !!storage.getItem && !!storage.removeItem;
    if (isSupport) {
      var key = randomString() + (/* @__PURE__ */ new Date()).getTime();
      var value = "1";
      storage.setItem(key, value);
      if (storage.getItem(key) !== value) {
        return false;
      }
      storage.removeItem(key);
    }
    return isSupport;
  } catch (e) {
    console.error("[cache2] ".concat(storage, " is not supported. The default memory cache will be used."));
    return false;
  }
}
function parse(value, reviver) {
  try {
    return JSON.parse(value, reviver);
  } catch (e) {
    return value;
  }
}
function stringify(value, replacer) {
  return JSON.stringify(value, replacer);
}
var Storage = (
  /** @class */
  function() {
    function Storage2(storage, options) {
      if (options === void 0) {
        options = {};
      }
      var isSupported = storage ? isStorageSupported(storage) : false;
      this.options = __assign({ needParsed: isSupported, prefix: "" }, options);
      this.storage = isSupported ? storage : new MemoryStorage(this.options.memoryScope);
    }
    Storage2.prototype.getKey = function(key) {
      return this.options.prefix + key;
    };
    Storage2.prototype.get = function(key) {
      var value = this.storage.getItem(this.getKey(key));
      return this.options.needParsed ? parse(value, this.options.reviver) : value;
    };
    Storage2.prototype.set = function(key, value) {
      this.storage.setItem(this.getKey(key), this.options.needParsed ? stringify(value, this.options.replacer) : value);
    };
    Storage2.prototype.del = function(key) {
      this.storage.removeItem(this.getKey(key));
    };
    Storage2.prototype.clear = function() {
      if (typeof this.storage.clear === "function") {
        this.storage.clear();
      }
    };
    return Storage2;
  }()
);
var defaultPrefix = "cache2_";
var defaultNamespace = "default";
var Cache = (
  /** @class */
  function(_super) {
    __extends(Cache2, _super);
    function Cache2(namespace, options) {
      var _this = _super.call(this) || this;
      var ns = defaultNamespace, opts;
      if (typeof namespace === "string") {
        ns = namespace || defaultNamespace;
      } else if (typeof namespace === "object") {
        opts = namespace;
      }
      if (!opts && typeof options === "object") {
        opts = options;
      }
      _this.options = __assign({ max: -1, stdTTL: 0, maxStrategy: "limited", checkperiod: 0, prefix: defaultPrefix }, opts);
      _this.storage = new Storage(_this.options.storage, __assign({ memoryScope: ns }, _this.options));
      _this.cacheKey = ns;
      _this.startCheckperiod();
      return _this;
    }
    Cache2.prototype._check = function(key, data) {
      var ret = true;
      if (data.t !== 0 && data.t < Date.now()) {
        ret = false;
        this.del(key);
        this.emit("expired", key, data.v);
      }
      return ret;
    };
    Cache2.prototype._wrap = function(value, ttl) {
      var now = Date.now();
      var currentTtl = typeof ttl === "number" ? ttl : this.options.stdTTL;
      var livetime = currentTtl > 0 ? now + currentTtl : 0;
      return {
        v: value,
        t: livetime,
        n: now
      };
    };
    Cache2.prototype._isLimited = function(len) {
      return this.options.max > -1 && len >= this.options.max;
    };
    Cache2.prototype._getReplaceKey = function(keys, cacheValues) {
      var retkey = keys[0];
      keys.forEach(function(key) {
        if (cacheValues[key].t < cacheValues[retkey].t || cacheValues[key].t === cacheValues[retkey].t && cacheValues[key].n < cacheValues[retkey].n) {
          retkey = key;
        }
      });
      return retkey;
    };
    Object.defineProperty(Cache2.prototype, "cacheValues", {
      /**
       * 获取全部缓存数据，不处理过期数据和排序
       */
      get: function() {
        return this.storage.get(this.cacheKey) || {};
      },
      enumerable: false,
      configurable: true
    });
    Cache2.prototype.setCacheValues = function(values) {
      this.storage.set(this.cacheKey, values);
    };
    Cache2.prototype.get = function(key) {
      var data = this.cacheValues[key];
      if (data && this._check(key, data)) {
        return data.v;
      }
      return;
    };
    Cache2.prototype.mget = function(keys) {
      var _this = this;
      var ret = {};
      if (!Array.isArray(keys)) {
        return ret;
      }
      var cacheValues = this.cacheValues;
      keys.forEach(function(key) {
        var data = cacheValues[key];
        if (data && _this._check(key, data)) {
          ret[key] = data.v;
        }
      });
      return ret;
    };
    Cache2.prototype.getAll = function() {
      var keys = Object.keys(this.cacheValues);
      return this.mget(keys);
    };
    Cache2.prototype.set = function(key, value, ttl) {
      if (this.options.max === 0) {
        return false;
      }
      var cacheValues = this.cacheValues;
      var keys = Object.keys(cacheValues);
      if (!cacheValues[key] && this._isLimited(keys.length)) {
        var validKeys = this.keys();
        if (this._isLimited(validKeys.length)) {
          if (this.options.maxStrategy === "replaced") {
            var replaceKey = this._getReplaceKey(validKeys, cacheValues);
            this.del(replaceKey);
          } else {
            return false;
          }
        }
      }
      cacheValues[key] = this._wrap(value, ttl);
      this.setCacheValues(cacheValues);
      this.emit("set", key, cacheValues[key].v);
      return true;
    };
    Cache2.prototype.mset = function(keyValueSet) {
      var _this = this;
      var ret = true;
      keyValueSet.forEach(function(item) {
        var itemSetResult = _this.set(item.key, item.value, item.ttl);
        if (ret && !itemSetResult) {
          ret = false;
        }
      });
      return ret;
    };
    Cache2.prototype.del = function(key) {
      var _this = this;
      var cacheValues = this.cacheValues;
      var count = 0;
      var keys = Array.isArray(key) ? key : [key];
      keys.forEach(function(key2) {
        if (cacheValues[key2]) {
          count++;
          var oldData = cacheValues[key2];
          delete cacheValues[key2];
          _this.emit("del", key2, oldData.v);
        }
      });
      if (count > 0) {
        this.setCacheValues(cacheValues);
      }
      return count;
    };
    Cache2.prototype.clear = function() {
      this.storage.del(this.cacheKey);
    };
    Cache2.prototype.keys = function() {
      var _this = this;
      var cacheValues = this.cacheValues;
      var keys = Object.keys(cacheValues);
      return keys.filter(function(key) {
        return _this._check(key, cacheValues[key]);
      });
    };
    Cache2.prototype.has = function(key) {
      var data = this.cacheValues[key];
      return !!(data && this._check(key, data));
    };
    Cache2.prototype.take = function(key) {
      var ret;
      var data = this.cacheValues[key];
      if (data && this._check(key, data)) {
        ret = data.v;
        this.del(key);
      }
      return ret;
    };
    Cache2.prototype.ttl = function(key, ttl) {
      var cacheValues = this.cacheValues;
      var data = cacheValues[key];
      if (data && this._check(key, data)) {
        cacheValues[key] = this._wrap(data.v, ttl);
        return true;
      }
      return false;
    };
    Cache2.prototype.getTtl = function(key) {
      var cacheValues = this.cacheValues;
      var data = cacheValues[key];
      if (data && this._check(key, data)) {
        return cacheValues[key].t;
      }
      return;
    };
    Cache2.prototype.getLastModified = function(key) {
      var cacheValues = this.cacheValues;
      var data = cacheValues[key];
      if (data && this._check(key, data)) {
        return cacheValues[key].n;
      }
      return;
    };
    Cache2.prototype.startCheckperiod = function() {
      var _this = this;
      this.keys();
      if (this.options.checkperiod > 0) {
        clearTimeout(this._checkTimeout);
        this._checkTimeout = setTimeout(function() {
          _this.startCheckperiod();
        }, this.options.checkperiod);
      }
    };
    Cache2.prototype.stopCheckperiod = function() {
      clearTimeout(this._checkTimeout);
    };
    return Cache2;
  }(EmitterPro)
);

// node_modules/util-helpers/esm/AsyncMemo.js
var AsyncMemo = function() {
  function AsyncMemo2(options) {
    this.promiseCache = {};
    this.cache = new Cache(uniqueId("uh_async_memo"), options);
  }
  AsyncMemo2.prototype.run = function(asyncFn, key, options) {
    var _this = this;
    if (!key || !isString(key)) {
      return asyncFn();
    }
    var opts = __assign({ persisted: true }, options);
    if (opts.persisted) {
      var data = this.cache.get(key);
      if (data) {
        return Promise.resolve(data);
      }
    }
    if (!this.promiseCache[key]) {
      this.promiseCache[key] = asyncFn().then(function(res) {
        delete _this.promiseCache[key];
        _this.cache.set(key, res, opts.ttl);
        return res;
      }).catch(function(err) {
        delete _this.promiseCache[key];
        return Promise.reject(err);
      });
    }
    return this.promiseCache[key];
  };
  return AsyncMemo2;
}();

// node_modules/util-helpers/esm/isSocialCreditCode.js
var baseCodeArr = "0123456789ABCDEFGHJKLMNPQRTUWXY".split("");

// node_modules/util-helpers/esm/isChinese.js
var chineseDictionary = {
  chineseBasic: "[一-龥]",
  chineseExtend: "[麦-鿿]",
  chineseExtend2: "[豈-龎]",
  chineseExtendA: "[㐀-䶿]",
  chineseExtendB: "[𠀀-𪛟]",
  chineseExtendC: "[𪜀-𫜸]",
  chineseExtendD: "[𫝀-𫠝]",
  chineseExtendE: "[𫠠-𬺡]",
  chineseExtendF: "[𬺰-𮯠]",
  chineseExtendG: "[𰀀-𱍊]",
  chineseExtendH: "[𱍐-𲎯]",
  chineseExtendI: "[𮯰-𮹝]"
};
var looseChineseRegExp = chineseDictionary.chineseBasic + "+";
var chineseRegExp = "^" + chineseDictionary.chineseBasic + "+$";
var chineseWithExtend = "(?:" + objectValues(chineseDictionary).join("|") + ")";
var looseChineseExtendRegExp = chineseWithExtend + "+";
var chineseExtendRegExp = "^" + chineseWithExtend + "+$";
var supportRegExpUnicode = RegExp.prototype.hasOwnProperty("unicode");

// node_modules/util-helpers/esm/isUrl.js
var protocalReg = "[\\w-.]+:\\/\\/";
var credentialsReg = "[-;:&=\\+\\$,\\w]+@";
var serverReg = "localhost|(([^\\s:\\/]+?\\.)+?[^\\s:\\/]+)";
var portReg = ":\\d+";
var pathReg = "\\/.*";
var searchReg = "\\?.*";
var hashReg = "#.*";
var regWithProtocal = new RegExp("^".concat(protocalReg, "(?:").concat(credentialsReg, ")?(?:").concat(serverReg, ")(?:").concat(portReg, ")?(?:").concat(pathReg, ")*(?:").concat(searchReg, ")?(?:").concat(hashReg, ")?$"));
var regNonProtocal = new RegExp("^(?:".concat(serverReg, ")(?:").concat(portReg, ")?(?:").concat(pathReg, ")*(?:").concat(searchReg, ")?(?:").concat(hashReg, ")?$"));

// node_modules/util-helpers/esm/randomString.js
var letter = "abcdefghijklmnopqrstuvwxyz";
var chars = {
  number: "0123456789",
  lower: letter,
  upper: letter.toUpperCase()
};
var allChars = chars.number + chars.lower + chars.upper;

export {
  loadImageWithBlob,
  AsyncMemo
};
//# sourceMappingURL=chunk-XKEAOX2N.js.map
