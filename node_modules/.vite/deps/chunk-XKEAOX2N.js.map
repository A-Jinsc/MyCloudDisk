{
  "version": 3,
  "sources": ["../../util-helpers/esm/utils/setup.js", "../../util-helpers/esm/utils/native.js", "../../util-helpers/esm/ajax.js", "../../util-helpers/esm/getFileBlob.js", "../../util-helpers/esm/loadImage.js", "../../util-helpers/esm/loadImageWithBlob.js", "../../emitter-pro/dist/emitter-pro.esm.js", "../../cache2/dist/cache2.esm.js", "../../util-helpers/esm/AsyncMemo.js", "../../util-helpers/esm/isSocialCreditCode.js", "../../util-helpers/esm/isChinese.js", "../../util-helpers/esm/isUrl.js", "../../util-helpers/esm/randomString.js"],
  "sourcesContent": ["var URLExisted = typeof URL !== 'undefined';\n\nexport { URLExisted };\n", "import { constant, noop } from 'ut2';\nimport { URLExisted } from './setup.js';\n\nvar nativeUndefined = void 0;\nvar objectKeys = Object.keys;\nvar objectValues = Object.values;\nvar createObjectURL = URLExisted ? URL.createObjectURL : constant('');\nvar revokeObjectURL = URLExisted ? URL.revokeObjectURL : noop;\n\nexport { createObjectURL, nativeUndefined, objectKeys, objectValues, revokeObjectURL };\n", "import { objectKeys } from './utils/native.js';\n\nfunction ajax(url, options) {\n    var _a = options || {}, _b = _a.method, method = _b === void 0 ? 'get' : _b, _c = _a.data, data = _c === void 0 ? null : _c, timeout = _a.timeout, headers = _a.headers, _d = _a.withCredentials, withCredentials = _d === void 0 ? false : _d, _e = _a.async, async = _e === void 0 ? true : _e, _f = _a.user, user = _f === void 0 ? null : _f, _g = _a.password, password = _g === void 0 ? null : _g, responseType = _a.responseType, onReadyStateChange = _a.onReadyStateChange, onLoadStart = _a.onLoadStart, onProgress = _a.onProgress, onAbort = _a.onAbort, onTimeout = _a.onTimeout, onError = _a.onError, onLoad = _a.onLoad, onLoadEnd = _a.onLoadEnd;\n    return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open(method.toLowerCase(), url, async, user, password);\n        if (onReadyStateChange) {\n            xhr.onreadystatechange = onReadyStateChange;\n        }\n        if (typeof timeout === 'number' && timeout > 0) {\n            xhr.timeout = timeout;\n        }\n        xhr.withCredentials = withCredentials;\n        if (responseType) {\n            xhr.responseType = responseType;\n        }\n        if (typeof headers === 'object') {\n            objectKeys(headers).map(function (item) {\n                xhr.setRequestHeader(item, headers[item]);\n            });\n        }\n        var wrapSuccess = function (cb) {\n            return function (e) {\n                resolve(e);\n                cb === null || cb === void 0 ? void 0 : cb.call(xhr, e);\n            };\n        };\n        var wrapError = function (cb) {\n            return function (e) {\n                reject(e);\n                cb === null || cb === void 0 ? void 0 : cb.call(xhr, e);\n            };\n        };\n        var events = {\n            loadstart: onLoadStart,\n            progress: onProgress,\n            abort: wrapError(onAbort),\n            timeout: wrapError(onTimeout),\n            error: wrapError(onError),\n            load: wrapSuccess(onLoad),\n            loadend: onLoadEnd\n        };\n        var eventKeys = objectKeys(events);\n        eventKeys.map(function (item) {\n            var func = events[item];\n            if (func) {\n                xhr.addEventListener(item, func);\n            }\n        });\n        xhr.send(data);\n    });\n}\n\nexport { ajax as default };\n", "import { __assign } from 'tslib';\nimport { isBlob } from 'ut2';\nimport ajax from './ajax.js';\n\nvar SuccessResponseStatus = [200, 304];\nfunction getFileBlob(file, ajaxOptions) {\n    return new Promise(function (resolve, reject) {\n        if (isBlob(file)) {\n            resolve(file);\n        }\n        else {\n            ajax(file, __assign({ responseType: 'blob' }, ajaxOptions))\n                .then(function (ev) {\n                var responseStatus = ev.target.status;\n                if (SuccessResponseStatus.indexOf(responseStatus) !== -1) {\n                    resolve(ev.target.response);\n                }\n                else {\n                    var err = new Error(\"The file does not support get requests, responseStatus \".concat(responseStatus, \", '\").concat(file, \"'.\"));\n                    console.error(err);\n                    reject(err);\n                }\n            })\n                .catch(function (err) {\n                console.error(new Error(\"Failed to request file. \".concat(err)));\n                reject(err);\n            });\n        }\n    });\n}\n\nexport { getFileBlob as default };\n", "import { isBlob } from 'ut2';\nimport { createObjectURL, revokeObjectURL } from './utils/native.js';\n\nfunction loadImage(img) {\n    return new Promise(function (resolve, reject) {\n        var imgIsBlob = isBlob(img);\n        var url = imgIsBlob ? createObjectURL(img) : img;\n        var image = new Image();\n        if (!imgIsBlob) {\n            image.crossOrigin = 'anonymous';\n        }\n        image.onload = function () {\n            resolve(image);\n        };\n        image.onerror = function (err) {\n            if (imgIsBlob) {\n                revokeObjectURL(url);\n            }\n            console.error(\"[loadImage] The image load failed, '\".concat(img, \"'.\"));\n            reject(err);\n        };\n        image.src = url;\n    });\n}\n\nexport { loadImage as default };\n", "import getFileBlob from './getFileBlob.js';\nimport loadImage from './loadImage.js';\n\nfunction loadImageWithBlob(img, ajaxOptions) {\n    return getFileBlob(img, ajaxOptions).then(function (blob) {\n        return loadImage(blob).then(function (image) {\n            return { blob: blob, image: image };\n        });\n    });\n}\n\nexport { loadImageWithBlob as default };\n", "/**\n * 事件触发器，支持浏览器端和 node 端。\n *\n * @class\n * @example\n *\n * const emitter = new Emitter();\n *\n * // 注册监听方法\n * emitter.on('foo', () => console.log('foo 1'));\n * emitter.on('foo', () => console.log('foo 2'));\n *\n * // 触发方法\n * emitter.emit('foo');\n * // foo 1\n * // foo 2\n *\n * // 取消监听方法\n * emitter.off('foo');\n *\n * // 支持链式调用\n * emitter.on('foo', () => {})\n *  .on('foo', () => {})\n *  .off('foo');\n */\nvar EmitterPro = /** @class */ (function () {\n    function EmitterPro() {\n        this.handlers = {};\n    }\n    /**\n     * 获取全部事件名称。\n     *\n     * @returns 事件名称数组。\n     * @example\n     * emitter.on('foo', () => {});\n     * emitter.on('bar', () => {});\n     *\n     * emitter.eventNames(); // ['foo', 'bar']\n     */\n    EmitterPro.prototype.eventNames = function () {\n        var _a;\n        var symbols = ((_a = Object.getOwnPropertySymbols) === null || _a === void 0 ? void 0 : _a.call(Object, this.handlers)) || [];\n        var keys = Object.keys(this.handlers);\n        return keys.concat(symbols);\n    };\n    /**\n     * 获取事件名称的全部监听方法（原始方法，未经过包装处理）。\n     *\n     * @param eventName 事件名称\n     * @returns 对应事件名称的监听方法数组\n     * @example\n     * const fn1 = () => console.log('bar');\n     * const fn2 = () => console.log('baz');\n     *\n     * emitter.on('test', fn1);\n     * emitter.once('test', fn2);\n     *\n     * emitter.rawListeners('test'); // [fn1, fn2]\n     */\n    EmitterPro.prototype.rawListeners = function (eventName) {\n        var handler = this.handlers[eventName];\n        return handler ? handler.map(function (item) { return item.raw; }) : [];\n    };\n    /**\n     * 获取事件名称的全部监听方法（如通过 `once` 方法注册，返回的是包装方法）。\n     *\n     * @param eventName 事件名称\n     * @returns 对应事件名称的监听方法数组\n     * @example\n     * const fn1 = () => console.log('bar');\n     * const fn2 = () => console.log('baz');\n     *\n     * emitter.on('test', fn1);\n     * emitter.once('test', fn2);\n     *\n     * emitter.rawListeners('test'); // [fn1, wrapFn2]\n     */\n    EmitterPro.prototype.listeners = function (eventName) {\n        var handler = this.handlers[eventName];\n        return handler ? handler.map(function (item) { return item.wrap; }) : [];\n    };\n    /**\n     * 判断事件名称对应的监听方法是否存在。\n     *\n     * @param eventName 事件名称\n     * @param listener 监听方法\n     * @returns 如果事件名称存在该事件方法返回 `true`，否则返回 `false`。\n     * @example\n     * const fn1 = () => console.log('bar');\n     * const fn2 = () => console.log('baz');\n     *\n     * emitter.on('test', fn1);\n     * emitter.once('test', fn2);\n     *\n     * emitter.hasListener('test', fn1); // true\n     * emitter.hasListener('test', fn2); // true\n     *\n     * // fn2 是通过 once 方法注册，执行一次后自动解绑\n     * emitter.emit('test');\n     *\n     * emitter.hasListener('test', fn1); // true\n     * emitter.hasListener('test', fn2); // false\n     */\n    EmitterPro.prototype.hasListener = function (eventName, listener) {\n        return this.rawListeners(eventName).some(function (item) { return item === listener; });\n    };\n    EmitterPro.prototype._on = function (eventName, raw, wrap, context, dir) {\n        if (context === void 0) { context = null; }\n        if (dir === void 0) { dir = 1; }\n        var currentListener = { raw: raw, wrap: wrap, context: context };\n        if (!this.handlers[eventName]) {\n            this.handlers[eventName] = [currentListener];\n        }\n        else {\n            var appendMethod = dir === 1 ? 'push' : 'unshift';\n            this.handlers[eventName][appendMethod](currentListener);\n        }\n        return this;\n    };\n    /**\n     * 注册监听方法。同 `on` 方法，只是将监听方法添加到最前面（事件触发是按顺序执行）。\n     *\n     * @param eventName 事件名称\n     * @param listener 监听方法\n     * @param context 执行上下文\n     * @returns 事件触发器实例。\n     * @example\n     * emitter.on('foo', () => console.log('bar'));\n     * emitter.prependListener('foo', () => console.log(42));\n     *\n     * emitter.emit('foo');\n     * // 42\n     * // bar\n     */\n    EmitterPro.prototype.prependListener = function (eventName, listener, context) {\n        return this._on(eventName, listener, listener, context, 0);\n    };\n    /**\n     * 注册监听方法。允许多次添加同一引用的函数。\n     *\n     * @param eventName 事件名称\n     * @param listener 监听方法\n     * @param context 执行上下文\n     * @returns 事件触发器实例。\n     * @example\n     * emitter.on('foo', () => console.log('bar'));\n     * emitter.on('foo', () => console.log(42));\n     *\n     * emitter.emit('foo');\n     * // bar\n     * // 42\n     */\n    EmitterPro.prototype.on = function (eventName, listener, context) {\n        return this._on(eventName, listener, listener, context);\n    };\n    EmitterPro.prototype._wrapOnce = function (eventName, listener, context) {\n        var _this = this;\n        if (context === void 0) { context = null; }\n        var wrap = (function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            listener.apply(context, args);\n            _this.off(eventName, wrap);\n        });\n        return wrap;\n    };\n    /**\n     * 仅触发一次的监听方法。使用方法同 `on` 。\n     *\n     * @param eventName 事件名称\n     * @param listener 监听方法\n     * @param context 执行上下文\n     * @returns 事件触发器实例。\n     * @example\n     * emitter.on('foo', () => console.log('bar'));\n     * emitter.once('foo', () => console.log(42));\n     *\n     * emitter.emit('foo');\n     * // bar\n     * // 42\n     *\n     * emitter.emit('foo');\n     * // bar\n     */\n    EmitterPro.prototype.once = function (eventName, listener, context) {\n        var wrap = this._wrapOnce(eventName, listener, context);\n        return this._on(eventName, listener, wrap, context);\n    };\n    /**\n     * 仅触发一次的监听方法。同 `once` 方法，只是添加到最前面（事件触发是按顺序执行）。\n     *\n     * @param eventName 事件名称\n     * @param listener 监听方法\n     * @param context 执行上下文\n     * @returns 事件触发器实例。\n     * @example\n     * emitter.on('foo', () => console.log('bar'));\n     * emitter.prependOnceListener('foo', () => console.log(42));\n     *\n     * emitter.emit('foo');\n     * // 42\n     * // bar\n     *\n     * emitter.emit('foo');\n     * // bar\n     */\n    EmitterPro.prototype.prependOnceListener = function (eventName, listener, context) {\n        var wrap = this._wrapOnce(eventName, listener, context);\n        return this._on(eventName, listener, wrap, context, 0);\n    };\n    /**\n     * 取消监听方法。如果不传第二个参数，将取消该事件名称的全部监听方法。如果多次添加同一引用的函数，需要多次删除。\n     *\n     * @param eventName 事件名称\n     * @param listener 监听方法\n     * @returns 事件触发器实例。\n     * @example\n     * const fn = () => console.log('bar');\n     * emitter.on('foo', fn);\n     * emitter.on('foo', () => console.log('baz'));\n     * emitter.on('foo', () => console.log(42));\n     *\n     * emitter.emit('foo');\n     * // bar\n     * // baz\n     * // 42\n     *\n     * emitter.off('foo', fn); // 取消 foo 的监听方法 fn\n     *\n     * emitter.emit('foo');\n     * // bar\n     * // 42\n     *\n     * emitter.off('foo'); // 取消 foo 的全部监听方法\n     * emitter.emit('foo'); // 什么都没发生\n     */\n    EmitterPro.prototype.off = function (eventName, listener) {\n        var handler = this.handlers[eventName];\n        if (handler) {\n            if (listener) {\n                var index = handler.findIndex(function (item) { return item.wrap === listener || item.raw === listener; });\n                if (index !== -1) {\n                    handler.splice(index, 1);\n                }\n            }\n            else {\n                delete this.handlers[eventName];\n            }\n        }\n        return this;\n    };\n    /**\n     * 取消全部事件名称的监听方法。\n     *\n     * @returns 事件触发器实例。\n     * @example\n     * const fn = () => console.log('bar');\n     * emitter.on('test', fn);\n     * emitter.on('test', () => console.log('baz'));\n     * emitter.on('test', () => console.log(42));\n     *\n     * emitter.on('other', fn);\n     * emitter.on('other', () => console.log('baz'));\n     *\n     * emitter.emit('test');\n     * // bar\n     * // baz\n     * // 42\n     *\n     * emitter.emit('other');\n     * // bar\n     * // baz\n     *\n     * emitter.offAll(); // 取消全部监听方法\n     *\n     * emitter.emit('test'); // 什么都没发生\n     * emitter.emit('other'); // 什么都没发生\n     */\n    EmitterPro.prototype.offAll = function () {\n        this.handlers = {};\n        return this;\n    };\n    /**\n     * 触发监听方法。\n     *\n     * @param eventName 事件名称\n     * @param args 触发监听方法的参数（从第二个参数开始都将传给监听方法）\n     * @returns 如果触发成功返回 `true`，否则返回 `false`。\n     * @example\n     * emitter.on('foo', () => console.log('bar'));\n     * emitter.on('foo', () => console.log(42));\n     *\n     * emitter.emit('foo');\n     * // bar\n     * // 42\n     *\n     * // 支持传入参数\n     * emitter.on('test' (a, b) => console.log(a + b));\n     * emitter.on('test' (a, b) => console.log(a * b));\n     *\n     * emitter.emit('other', 2, 5);\n     * // 7\n     * // 10\n     *\n     * emitter.emit('other', 5, 5);\n     * // 10\n     * // 25\n     */\n    EmitterPro.prototype.emit = function (eventName) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var handler = this.handlers[eventName];\n        if (handler && handler.length > 0) {\n            handler.forEach(function (listener) {\n                listener.wrap.apply(listener.context, args);\n            });\n            return true;\n        }\n        return false;\n    };\n    return EmitterPro;\n}());\n\nexport { EmitterPro as default };\n", "import { __assign, __extends } from 'tslib';\nimport Emitter from 'emitter-pro';\n\nvar cache = {};\nvar MemoryStorage = /** @class */ (function () {\n    function MemoryStorage(scope) {\n        if (scope === void 0) { scope = 'default'; }\n        this.scope = scope;\n        if (!cache[this.scope]) {\n            cache[this.scope] = {};\n        }\n        this.data = cache[this.scope];\n    }\n    MemoryStorage.prototype.getItem = function (key) {\n        return key in this.data ? this.data[key] : null;\n    };\n    MemoryStorage.prototype.setItem = function (key, value) {\n        this.data[key] = value;\n    };\n    MemoryStorage.prototype.removeItem = function (key) {\n        delete this.data[key];\n    };\n    MemoryStorage.prototype.clear = function () {\n        cache[this.scope] = {};\n        this.data = cache[this.scope];\n    };\n    return MemoryStorage;\n}());\n\n// 随机字符串\nfunction randomString() {\n    return Math.random().toString(16).substring(2, 8);\n}\n// 是否支持 storage\nfunction isStorageSupported(storage) {\n    try {\n        var isSupport = typeof storage === 'object' &&\n            storage !== null &&\n            !!storage.setItem &&\n            !!storage.getItem &&\n            !!storage.removeItem;\n        if (isSupport) {\n            var key = randomString() + new Date().getTime();\n            var value = '1';\n            storage.setItem(key, value);\n            if (storage.getItem(key) !== value) {\n                return false;\n            }\n            storage.removeItem(key);\n        }\n        return isSupport;\n    }\n    catch (e) {\n        console.error(\"[cache2] \".concat(storage, \" is not supported. The default memory cache will be used.\"));\n        return false;\n    }\n}\nfunction parse(value, reviver) {\n    try {\n        return JSON.parse(value, reviver);\n    }\n    catch (e) {\n        return value;\n    }\n}\nfunction stringify(value, replacer) {\n    return JSON.stringify(value, replacer);\n}\n\n/**\n * 数据存储管理。\n *\n * @class\n * @param {Object} [storage] 自定义缓存对象要包含 `getItem` `setItem` `removeItem` 方法。默认使用内存缓存。\n * @param {Object} [options] 配置项。可选。\n * @param {boolean} [options.needParsed] 存取数据时是否需要序列化和解析数据。如果使用内置的内存缓存，默认 `false`，如果自定义 `storage` 默认 `true`。\n * @param {Function} [options.replacer] 数据存储时序列化的参数，透传给 [JSON.stringify](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) 的 `replacer` 参数。仅在 `needParsed=true` 时生效。\n * @param {Function} [options.reviver] 数据获取时转换的参数，透传给 [JSON.parse](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) 的 `reviver` 参数。仅在 `needParsed=true` 时生效。\n * @param {string} [options.prefix] 缓存键前缀。便于管理同域名下的不同项目缓存。\n * @example\n * // 使用内存缓存\n * const memory = new Storage();\n * memory.set('foo', { baz: 42 });\n * memory.get('foo');\n * // { baz: 42 }\n *\n * // 自定义缓存 sessionStorage 。\n * const session = new Storage(window.sessionStorage);\n * session.set('foo', { a: 1, b: ['bar'], c: ['x', 2, 3] });\n * session.get('foo');\n * // { a: 1, b: ['bar'], c: ['x', 2, 3] }\n *\n * session.del('foo'); // 删除缓存\n * session.get('foo');\n * // null\n *\n * // 使用缓存键前缀。\n * // 如果要使用内存缓存， storage 传 `undefined`。\n * const local = new Storage(window.localStorage, { prefix: 'project_name' });\n * local.set('foo', { baz: 42 });\n * local.get('foo');\n * // { baz: 42 }\n */\nvar Storage = /** @class */ (function () {\n    function Storage(storage, options) {\n        if (options === void 0) { options = {}; }\n        var isSupported = storage ? isStorageSupported(storage) : false;\n        this.options = __assign({ needParsed: isSupported, prefix: '' }, options);\n        this.storage = isSupported ? storage : new MemoryStorage(this.options.memoryScope);\n    }\n    /**\n     * 内部用于获取存储的键名称。\n     *\n     * 如果实例有设置 `prefix`，返回 `prefix + key`。\n     *\n     * @protected\n     * @param key 原键名称\n     * @returns 存储的键名称\n     */\n    Storage.prototype.getKey = function (key) {\n        return this.options.prefix + key;\n    };\n    /**\n     * 获取存储的数据。\n     *\n     * @param {string} key 键名称。\n     * @returns 如果键值存在返回键值，否则返回 `null`。\n     * @example\n     * const local = new Storage(window.localStorage);\n     * local.set('foo', { baz: 42 });\n     * local.get('foo');\n     * // { baz: 42 }\n     */\n    Storage.prototype.get = function (key) {\n        var value = this.storage.getItem(this.getKey(key));\n        return this.options.needParsed ? parse(value, this.options.reviver) : value;\n    };\n    /**\n     * 存储数据。\n     *\n     * @param key 键名称。\n     * @param value 键值。\n     * @example\n     * const local = new Storage(window.localStorage);\n     * local.set('foo', { baz: 42 });\n     * local.get('foo');\n     * // { baz: 42 }\n     */\n    Storage.prototype.set = function (key, value) {\n        this.storage.setItem(this.getKey(key), this.options.needParsed ? stringify(value, this.options.replacer) : value);\n    };\n    /**\n     * 删除存储的数据。\n     *\n     * @param key 键名称。\n     * @example\n     * const local = new Storage(window.localStorage);\n     * local.set('foo', { baz: 42 });\n     * local.get('foo');\n     * // { baz: 42 }\n     *\n     * local.del('foo');\n     * local.get('foo');\n     * // null\n     */\n    Storage.prototype.del = function (key) {\n        this.storage.removeItem(this.getKey(key));\n    };\n    /**\n     * 清除存储的所有键。\n     *\n     * 注意：该方法调用 `storage.clear()`，可能会将同域下的不同实例的所有键都清除。如果要避免这种情况，建议使用 `import { Cache } 'cache2'`。\n     *\n     * @example\n     * const local = new Storage(window.localStorage);\n     * local.set('foo', { baz: 42 });\n     * local.get('foo');\n     * // { baz: 42 }\n     *\n     * local.clear();\n     * local.get('foo');\n     * // null\n     */\n    Storage.prototype.clear = function () {\n        if (typeof this.storage.clear === 'function') {\n            this.storage.clear();\n        }\n    };\n    return Storage;\n}());\n\n// 命名空间缓存键前缀。\nvar defaultPrefix = 'cache2_';\nvar defaultNamespace = 'default';\n/**\n * 功能丰富的数据存储管理，支持 `自定义缓存` `命名空间` `数据过期时间` `限制缓存数量` `自定义事件`。\n *\n * 注意：如果你需要的是简单的基本数据存储管理，例如浏览器存储，建议使用 `import { Storage } from 'cache2'`。\n *\n * @class\n * @param {string} [namespace] 命名空间。可选。\n * @param {Object} [options] 配置项。可选。\n * @param {Object} [options.storage] 自定义缓存对象要包含 `getItem` `setItem` `removeItem` 方法。默认使用内置的内存缓存。\n * @param {number} [options.max=-1] 最大缓存数据数量。`-1` 表示无限制。默认 `-1`。\n * @param {'limited' | 'replaced'} [options.maxStrategy='limited'] 当达到最大缓存数量限制时的缓存策略。`limited` 表示达到限制数量后不存入数据，保存时返回 `false`。`replaced` 表示优先替换快过期的数据，如果都是一样的过期时间(0)，按照先入先出规则处理，保存时始终返回 `true`。默认 `limited`。\n * @param {number} [options.stdTTL=0] 相对当前时间的数据存活时间，应用于当前实例的所有缓存数据。单位为毫秒，`0` 表示无期限。默认 `0`。\n * @param {number} [options.checkperiod=0] 定时检查过期数据，单位毫秒。如果小于等于 `0` 表示不启动定时器检查。默认 `0`。\n * @param {boolean} [options.needParsed] 存取数据时是否需要序列化和解析数据。如果使用内置的内存缓存，默认 `false`，如果自定义 `storage` 默认 `true`。\n * @param {Function} [options.replacer] 数据存储时序列化的参数，透传给 [JSON.stringify](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) 的 `replacer` 参数。仅在 `needParsed=true` 时生效。\n * @param {Function} [options.reviver] 数据获取时转换的参数，透传给 [JSON.parse](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) 的 `reviver` 参数。仅在 `needParsed=true` 时生效。\n * @param {string} [options.prefix] 缓存键前缀。\n * @example\n * // 自定义过期时间\n * const memoryCache = new Cache({ stdTTL: 60 * 1000 });\n * memoryCache.set('foo', { baz: 42 });\n * memoryCache.get('foo');\n * // { baz: 42 }\n *\n * // 60 seconds later\n *\n * memoryCache.get('foo');\n * // undefined\n *\n * // 命名空间、自定义缓存\n * const localCache = new Cache('namespace', { storage: window.localStorage });\n * localCache.set('foo', { baz: 42 });\n * localCache.get('foo');\n * // { baz: 42 }\n *\n * localCache.del('foo');\n * localCache.get('foo');\n * // undefined\n */\nvar Cache = /** @class */ (function (_super) {\n    __extends(Cache, _super);\n    function Cache(namespace, options) {\n        var _this = _super.call(this) || this;\n        var ns = defaultNamespace, opts;\n        if (typeof namespace === 'string') {\n            ns = namespace || defaultNamespace;\n        }\n        else if (typeof namespace === 'object') {\n            opts = namespace;\n        }\n        if (!opts && typeof options === 'object') {\n            opts = options;\n        }\n        _this.options = __assign({ max: -1, stdTTL: 0, maxStrategy: 'limited', checkperiod: 0, prefix: defaultPrefix }, opts);\n        _this.storage = new Storage(_this.options.storage, __assign({ memoryScope: ns }, _this.options));\n        _this.cacheKey = ns;\n        _this.startCheckperiod();\n        return _this;\n    }\n    /**\n     * 检查当前键值是否过期，如果过期将会自动删除。\n     *\n     * @param key 键名称。\n     * @param data 缓存数据。\n     * @returns 如果键值已过期返回 `false` ，否则返回 `true`。\n     */\n    Cache.prototype._check = function (key, data) {\n        var ret = true;\n        if (data.t !== 0 && data.t < Date.now()) {\n            ret = false;\n            this.del(key);\n            this.emit('expired', key, data.v);\n        }\n        return ret;\n    };\n    Cache.prototype._wrap = function (value, ttl) {\n        var now = Date.now();\n        var currentTtl = typeof ttl === 'number' ? ttl : this.options.stdTTL;\n        var livetime = currentTtl > 0 ? now + currentTtl : 0;\n        return {\n            v: value,\n            t: livetime,\n            n: now\n        };\n    };\n    Cache.prototype._isLimited = function (len) {\n        return this.options.max > -1 && len >= this.options.max;\n    };\n    Cache.prototype._getReplaceKey = function (keys, cacheValues) {\n        var retkey = keys[0];\n        keys.forEach(function (key) {\n            if (cacheValues[key].t < cacheValues[retkey].t ||\n                (cacheValues[key].t === cacheValues[retkey].t && cacheValues[key].n < cacheValues[retkey].n)) {\n                retkey = key;\n            }\n        });\n        return retkey;\n    };\n    Object.defineProperty(Cache.prototype, \"cacheValues\", {\n        /**\n         * 获取全部缓存数据，不处理过期数据和排序\n         */\n        get: function () {\n            return this.storage.get(this.cacheKey) || {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // 设置缓存数据\n    Cache.prototype.setCacheValues = function (values) {\n        this.storage.set(this.cacheKey, values);\n    };\n    /**\n     * 获取缓存值。\n     *\n     * @param {string} key 键名称。\n     * @returns {*} 如果找到该值，则返回该值。如果未找到或已过期，则返回 `undefined`。\n     * @example\n     * myCache.set('myKey', obj, 5 * 60 * 1000);\n     * myCache.get('myKey');\n     * // { foo: 'bar', baz: 42 }\n     *\n     * myCache.get('myKey2');\n     * // undefined\n     */\n    Cache.prototype.get = function (key) {\n        var data = this.cacheValues[key];\n        if (data && this._check(key, data)) {\n            return data.v;\n        }\n        return;\n    };\n    /**\n     * 获取多个缓存值。\n     *\n     * @param {string[]} keys 多个键名称。\n     * @returns {Object} 如果找到对应键名的值，返回一个具有键值对的对象。如果未找到或已过期，则返回一个空对象 `{}`。\n     * @example\n     * myCache.mset([\n     *   { key: 'myKey', value: { foo: 'bar', baz: 42 }, ttl: 5 * 60 * 1000 },\n     *   { key: 'myKey2', value: { a: 1, b: 2 } },\n     *   { key: 'myKey3', value: 'abc' }\n     * ]);\n     *\n     * myCache.mget(['myKey', 'myKey2']);\n     * // {\n     * //   myKey: { foo: 'bar', baz: 42 },\n     * //   myKey2: { a: 1, b: 2 }\n     * // }\n     */\n    Cache.prototype.mget = function (keys) {\n        var _this = this;\n        var ret = {};\n        if (!Array.isArray(keys)) {\n            return ret;\n        }\n        var cacheValues = this.cacheValues;\n        keys.forEach(function (key) {\n            var data = cacheValues[key];\n            if (data && _this._check(key, data)) {\n                ret[key] = data.v;\n            }\n        });\n        return ret;\n    };\n    /**\n     * 获取全部缓存值。\n     *\n     * @returns {Object} 返回一个具有键值对的对象。\n     * @example\n     * myCache.mset([\n     *   { key: 'myKey', value: { foo: 'bar', baz: 42 }, ttl: 5 * 60 * 1000 },\n     *   { key: 'myKey2', value: { a: 1, b: 2 } },\n     *   { key: 'myKey3', value: 'abc' }\n     * ]);\n     *\n     * myCache.getAll();\n     * // {\n     * //   myKey: { foo: 'bar', baz: 42 },\n     * //   myKey2: { a: 1, b: 2 }\n     * //   myKey3: 'abc'\n     * // }\n     */\n    Cache.prototype.getAll = function () {\n        var keys = Object.keys(this.cacheValues);\n        return this.mget(keys);\n    };\n    /**\n     * 设置缓存数据。\n     *\n     * 如果超出缓存数量，可能会设置失败。\n     *\n     * @param {string} key 键名称。\n     * @param {*} value 键值。\n     * @param {number} [ttl] 数据存活时间。单位毫秒 `ms`。\n     * @returns {boolean} 如果设置成功返回 `true`，否则返回 `false`。\n     * @example\n     * myCache.set('myKey', { foo: 'bar', baz: 42 }, 5 * 60 * 1000);\n     * // true\n     */\n    Cache.prototype.set = function (key, value, ttl) {\n        if (this.options.max === 0) {\n            return false;\n        }\n        var cacheValues = this.cacheValues;\n        var keys = Object.keys(cacheValues);\n        // 当前不存在该键值，并且数据量超过最大限制\n        if (!cacheValues[key] && this._isLimited(keys.length)) {\n            var validKeys = this.keys();\n            if (this._isLimited(validKeys.length)) {\n                // 如果最大限制策略是替换，将优先替换快过期的数据，如果都是一样的过期时间(0)，按照先入先出规则处理。\n                if (this.options.maxStrategy === 'replaced') {\n                    var replaceKey = this._getReplaceKey(validKeys, cacheValues);\n                    this.del(replaceKey);\n                }\n                else {\n                    // 如果是最大限制策略是不允许添加，返回 false 。\n                    return false;\n                }\n            }\n        }\n        cacheValues[key] = this._wrap(value, ttl);\n        this.setCacheValues(cacheValues);\n        this.emit('set', key, cacheValues[key].v);\n        return true;\n    };\n    /**\n     * 设置多个缓存数据。\n     *\n     * @param {Object[]} keyValueSet 多个键值对数据。\n     * @returns {boolean} 如果全部设置成功返回 `true`，否则返回 `false`。\n     * @example\n     * myCache.mset([\n     *   { key: 'myKey', value: { foo: 'bar', baz: 42 }, ttl: 5 * 60 * 1000 },\n     *   { key: 'myKey2', value: { a: 1, b: 2 } },\n     *   { key: 'myKey3', value: 'abc' }\n     * ]);\n     * // true\n     */\n    Cache.prototype.mset = function (keyValueSet) {\n        var _this = this;\n        // 该处不使用数组 some 方法，是因为不能某个失败，而导致其他就不在更新。\n        var ret = true;\n        keyValueSet.forEach(function (item) {\n            var itemSetResult = _this.set(item.key, item.value, item.ttl);\n            if (ret && !itemSetResult) {\n                ret = false;\n            }\n        });\n        return ret;\n    };\n    /**\n     * 删除一个或多个键。\n     *\n     * @param {string|string[]} key 要删除的键名。\n     * @returns {number} 返回已删除的数量。\n     * @example\n     * myCache.set('myKey', { foo: 'bar', baz: 42 });\n     * myCache.del('myKey'); // 1\n     * myCache.del('not found'); // 0\n     *\n     * myCache.mset([\n     *   { key: 'myKey', value: { foo: 'bar', baz: 42 }, ttl: 5 * 60 * 1000 },\n     *   { key: 'myKey2', value: { a: 1, b: 2 } },\n     *   { key: 'myKey3', value: 'abc' }\n     * ]);\n     * myCache.del(['myKey', 'myKey2']); // 2\n     */\n    Cache.prototype.del = function (key) {\n        var _this = this;\n        var cacheValues = this.cacheValues;\n        var count = 0;\n        var keys = Array.isArray(key) ? key : [key];\n        keys.forEach(function (key) {\n            if (cacheValues[key]) {\n                count++;\n                var oldData = cacheValues[key];\n                delete cacheValues[key];\n                _this.emit('del', key, oldData.v);\n            }\n        });\n        if (count > 0) {\n            this.setCacheValues(cacheValues);\n        }\n        return count;\n    };\n    /**\n     * 清除全部缓存的数据。\n     *\n     * @example\n     * myCache.set('bar', 1);\n     * myCache.set('foo', 2);\n     * myCache.keys(); // ['bar', 'foo']\n     *\n     * myCache.clear();\n     * myCache.keys(); // []\n     */\n    Cache.prototype.clear = function () {\n        this.storage.del(this.cacheKey);\n    };\n    /**\n     * 获取全部键名的数组。\n     *\n     * @returns {string[]} 返回全部键名的数组。\n     * @example\n     * myCache.set('bar', 1);\n     * myCache.set('foo', 2);\n     *\n     * myCache.keys(); // ['bar', 'foo']\n     */\n    Cache.prototype.keys = function () {\n        var _this = this;\n        var cacheValues = this.cacheValues;\n        var keys = Object.keys(cacheValues);\n        return keys.filter(function (key) { return _this._check(key, cacheValues[key]); });\n    };\n    /**\n     * 判断是否存在某个键。\n     *\n     * @param {string} key 键名称。\n     * @returns {boolean} 如果包含该键返回 `true`，否则返回 `false`。\n     * @example\n     * myCache.has('foo'); // false\n     *\n     * myCache.set('foo', 1);\n     * myCache.has('foo'); // true\n     */\n    Cache.prototype.has = function (key) {\n        var data = this.cacheValues[key];\n        return !!(data && this._check(key, data));\n    };\n    /**\n     * 获取缓存值并从缓存中删除键。\n     *\n     * @param {string} key 键名称。\n     * @returns {*} 如果找到该值，则返回该值，并从缓存中删除该键。如果未找到或已过期，则返回 `undefined`。\n     * @example\n     * myCache.set('myKey', 'myValue');\n     * myCache.has('myKey'); // true\n     *\n     * myCache.take('myKey'); // 'myValue'\n     * myCache.has('myKey'); // false\n     */\n    Cache.prototype.take = function (key) {\n        var ret;\n        var data = this.cacheValues[key];\n        if (data && this._check(key, data)) {\n            ret = data.v;\n            this.del(key);\n        }\n        return ret;\n    };\n    /**\n     * 更新缓存键值的数据存活时间。\n     *\n     * @param {string} key 键名称。\n     * @param {number} ttl 数据存活时间。\n     * @returns {boolean} 如果找到并更新成功，则返回 `true`，否则返回 `false`。\n     * @example\n     * myCache.set('myKey', { foo: 'bar', baz: 42 }, 5 * 60 * 1000);\n     * myCache.ttl('myKey', 60 * 1000);\n     * // true\n     *\n     * myCache.ttl('not found', 1000);\n     * // false\n     */\n    Cache.prototype.ttl = function (key, ttl) {\n        var cacheValues = this.cacheValues;\n        var data = cacheValues[key];\n        if (data && this._check(key, data)) {\n            cacheValues[key] = this._wrap(data.v, ttl);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * 获取某个键的过期时间戳。\n     *\n     * @param {string} key 键名称。\n     * @returns {number | undefined} 如果未找到键或已过期，返回 `undefined`。如果 `ttl` 为 `0`，返回 `0`，否则返回一个以毫秒为单位的时间戳，表示键值将过期的时间。\n     * @example\n     * const myCache = new Cache({ stdTTL: 5 * 1000 });\n     *\n     * // 假如 Date.now() = 1673330000000\n     * myCache.set('ttlKey', 'expireData');\n     * myCache.set('noTtlKey', 'nonExpireData', 0);\n     *\n     * myCache.getTtl('ttlKey'); // 1673330005000\n     * myCache.getTtl('noTtlKey'); // 0\n     * myCache.getTtl('unknownKey'); // undefined\n     */\n    Cache.prototype.getTtl = function (key) {\n        var cacheValues = this.cacheValues;\n        var data = cacheValues[key];\n        if (data && this._check(key, data)) {\n            return cacheValues[key].t;\n        }\n        return;\n    };\n    /**\n     * 获取某个键值的最后修改时间。\n     *\n     * @param {string} key 键名称。\n     * @returns {number | undefined} 如果未找到键或已过期，返回 `undefined`，否则返回一个以毫秒时间戳，表示键值最后修改时间。\n     * @example\n     * const myCache = new Cache();\n     *\n     * // 假如 Date.now() = 1673330000000\n     * myCache.set('myKey', 'foo');\n     * myCache.getLastModified('myKey'); // 1673330000000\n     *\n     * // 5000ms later\n     * myCache.set('myKey', 'bar');\n     * myCache.getLastModified('myKey'); // 1673330005000\n     */\n    Cache.prototype.getLastModified = function (key) {\n        var cacheValues = this.cacheValues;\n        var data = cacheValues[key];\n        if (data && this._check(key, data)) {\n            return cacheValues[key].n;\n        }\n        return;\n    };\n    /**\n     * 启动定时校验过期数据。\n     *\n     * 注意，如果没有设置 `checkperiod` 将不会触发定时器。\n     *\n     * @example\n     * // 设置 checkperiod 之后自动生效\n     * const myCache = new Cache({\n     *   checkperiod: 10 * 60 * 1000 // 10分钟检查一次数据是否过期\n     * });\n     *\n     * // 停止定时校验过期数据\n     * myCache.stopCheckperiod();\n     *\n     * // 启动定时校验过期数据\n     * myCache.startCheckperiod();\n     */\n    Cache.prototype.startCheckperiod = function () {\n        var _this = this;\n        // 触发全部缓存数据是否过期校验\n        this.keys();\n        if (this.options.checkperiod > 0) {\n            clearTimeout(this._checkTimeout);\n            this._checkTimeout = setTimeout(function () {\n                _this.startCheckperiod();\n            }, this.options.checkperiod);\n        }\n    };\n    /**\n     * 停止定时校验过期数据。\n     *\n     * @example\n     * // 设置 checkperiod 之后自动生效\n     * const myCache = new Cache({\n     *   checkperiod: 10 * 60 * 1000 // 10分钟检查一次数据是否过期\n     * });\n     *\n     * // 停止定时校验过期数据\n     * myCache.stopCheckperiod();\n     */\n    Cache.prototype.stopCheckperiod = function () {\n        clearTimeout(this._checkTimeout);\n    };\n    return Cache;\n}(Emitter));\n\nexport { Cache, Storage, Cache as default };\n", "import { __assign } from 'tslib';\nimport { Cache } from 'cache2';\nimport { isString, uniqueId } from 'ut2';\n\nvar AsyncMemo = (function () {\n    function AsyncMemo(options) {\n        this.promiseCache = {};\n        this.cache = new Cache(uniqueId('uh_async_memo'), options);\n    }\n    AsyncMemo.prototype.run = function (asyncFn, key, options) {\n        var _this = this;\n        if (!key || !isString(key)) {\n            return asyncFn();\n        }\n        var opts = __assign({ persisted: true }, options);\n        if (opts.persisted) {\n            var data = this.cache.get(key);\n            if (data) {\n                return Promise.resolve(data);\n            }\n        }\n        if (!this.promiseCache[key]) {\n            this.promiseCache[key] = asyncFn()\n                .then(function (res) {\n                delete _this.promiseCache[key];\n                _this.cache.set(key, res, opts.ttl);\n                return res;\n            })\n                .catch(function (err) {\n                delete _this.promiseCache[key];\n                return Promise.reject(err);\n            });\n        }\n        return this.promiseCache[key];\n    };\n    return AsyncMemo;\n}());\n\nexport { AsyncMemo as default };\n", "import { toString } from 'ut2';\n\nvar baseReg = /^[\\dA-HJ-NPQRTUWXY]{2}\\d{6}[\\dA-HJ-NPQRTUWXY]{10}$/;\nvar baseCodeArr = '0123456789ABCDEFGHJKLMNPQRTUWXY'.split('');\nfunction sumCheckCode(preCode) {\n    var total = 0;\n    var _loop_1 = function (i) {\n        var index = baseCodeArr.findIndex(function (item) { return item === preCode[i]; });\n        var wf = Math.pow(3, i) % 31;\n        total += index * wf;\n    };\n    for (var i = 0; i < 17; i++) {\n        _loop_1(i);\n    }\n    var remainder = total % 31;\n    var checkCodeIndex = remainder !== 0 ? 31 - remainder : 0;\n    return baseCodeArr[checkCodeIndex];\n}\nfunction isSocialCreditCode(value, options) {\n    var valueStr = toString(value);\n    var _a = (options || {}).checkCode, needCheckCode = _a === void 0 ? true : _a;\n    var passBaseRule = baseReg.test(valueStr);\n    if (!needCheckCode || !passBaseRule) {\n        return passBaseRule;\n    }\n    var preCode = valueStr.substring(0, 17);\n    var lastCode = valueStr.substring(valueStr.length - 1);\n    var checkCode = sumCheckCode(preCode);\n    return lastCode === checkCode;\n}\n\nexport { isSocialCreditCode as default };\n", "import { toString } from 'ut2';\nimport { objectValues, nativeUndefined } from './utils/native.js';\n\nvar chineseDictionary = {\n    chineseBasic: '[\\u4e00-\\u9fa5]',\n    chineseExtend: '[\\u9ea6-\\u9fff]',\n    chineseExtend2: '[\\uF900-\\uFAD9]',\n    chineseExtendA: '[\\u3400-\\u4DBF]',\n    chineseExtendB: \"[\\uD840\\uDC00-\\uD869\\uDEDF]\",\n    chineseExtendC: \"[\\uD869\\uDF00-\\uD86D\\uDF38]\",\n    chineseExtendD: \"[\\uD86D\\uDF40-\\uD86E\\uDC1D]\",\n    chineseExtendE: \"[\\uD86E\\uDC20-\\uD873\\uDEA1]\",\n    chineseExtendF: \"[\\uD873\\uDEB0-\\uD87A\\uDFE0]\",\n    chineseExtendG: \"[\\uD880\\uDC00-\\uD884\\uDF4A]\",\n    chineseExtendH: \"[\\uD884\\uDF50-\\uD888\\uDFAF]\",\n    chineseExtendI: \"[\\uD87A\\uDFF0-\\uD87B\\uDE5D]\"\n};\nvar looseChineseRegExp = chineseDictionary.chineseBasic + '+';\nvar chineseRegExp = '^' + chineseDictionary.chineseBasic + '+$';\nvar chineseWithExtend = '(?:' + objectValues(chineseDictionary).join('|') + ')';\nvar looseChineseExtendRegExp = chineseWithExtend + '+';\nvar chineseExtendRegExp = '^' + chineseWithExtend + '+$';\nvar supportRegExpUnicode = RegExp.prototype.hasOwnProperty('unicode');\nfunction isChinese(value, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.loose, loose = _a === void 0 ? false : _a, _b = options.useExtend, useExtend = _b === void 0 ? false : _b;\n    var valueStr = toString(value);\n    var basicRegExp = loose ? looseChineseRegExp : chineseRegExp;\n    var extendRegExp = loose ? looseChineseExtendRegExp : chineseExtendRegExp;\n    var hasExtend = useExtend && supportRegExpUnicode;\n    var resultRegExp = hasExtend ? extendRegExp : basicRegExp;\n    var flag = hasExtend ? 'u' : nativeUndefined;\n    var reg = new RegExp(resultRegExp, flag);\n    return reg.test(valueStr);\n}\n\nexport { isChinese as default };\n", "import { toString } from 'ut2';\n\nvar protocalReg = '[\\\\w-.]+:\\\\/\\\\/';\nvar credentialsReg = '[-;:&=\\\\+\\\\$,\\\\w]+@';\nvar serverReg = 'localhost|(([^\\\\s:\\\\/]+?\\\\.)+?[^\\\\s:\\\\/]+)';\nvar portReg = ':\\\\d+';\nvar pathReg = '\\\\/.*';\nvar searchReg = '\\\\?.*';\nvar hashReg = '#.*';\nvar regWithProtocal = new RegExp(\"^\".concat(protocalReg, \"(?:\").concat(credentialsReg, \")?(?:\").concat(serverReg, \")(?:\").concat(portReg, \")?(?:\").concat(pathReg, \")*(?:\").concat(searchReg, \")?(?:\").concat(hashReg, \")?$\"));\nvar regNonProtocal = new RegExp(\"^(?:\".concat(serverReg, \")(?:\").concat(portReg, \")?(?:\").concat(pathReg, \")*(?:\").concat(searchReg, \")?(?:\").concat(hashReg, \")?$\"));\nfunction isUrl(value) {\n    var valueStr = toString(value);\n    return regWithProtocal.test(valueStr) || regNonProtocal.test(valueStr);\n}\n\nexport { isUrl as default };\n", "import { toNumber, randomInt } from 'ut2';\n\nvar letter = 'abcdefghijklmnopqrstuvwxyz';\nvar chars = {\n    number: '0123456789',\n    lower: letter,\n    upper: letter.toUpperCase()\n};\nvar allChars = chars.number + chars.lower + chars.upper;\nfunction internalRandomString(len, pool, prefix) {\n    if (prefix === void 0) { prefix = ''; }\n    while (len-- > 0) {\n        var r = pool[randomInt(0, pool.length - 1)];\n        return internalRandomString(len, pool, prefix + r);\n    }\n    return prefix;\n}\nvar randomString = function (len, pool) {\n    if (len === void 0) { len = 0; }\n    var _pool;\n    if (typeof pool !== 'string') {\n        _pool = allChars;\n    }\n    else if (chars[pool]) {\n        _pool = chars[pool];\n    }\n    else {\n        _pool = pool;\n    }\n    return internalRandomString(toNumber(len), _pool);\n};\n\nexport { randomString as default };\n"],
  "mappings": "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",
  "names": ["EmitterPro", "MemoryStorage", "Storage", "Cache", "key", "AsyncMemo"]
}
