import {
  AsyncMemo
} from "./chunk-XKEAOX2N.js";
import {
  __assign,
  __awaiter,
  __generator,
  __read,
  __rest,
  debounce,
  throttle
} from "./chunk-BNL6YVI4.js";
import {
  require_classnames
} from "./chunk-A6WW3Q4G.js";
import {
  require_react
} from "./chunk-CANBAPAS.js";
import {
  __toESM
} from "./chunk-5WRI5ZAA.js";

// node_modules/rc-slider-captcha/dist/index.esm.js
var import_classnames = __toESM(require_classnames());
var import_react25 = __toESM(require_react());

// node_modules/rc-hooks/es/useAsync/index.js
var import_react4 = __toESM(require_react());

// node_modules/rc-hooks/es/usePersistFn/index.js
var import_react2 = __toESM(require_react());

// node_modules/rc-hooks/es/useLatest/index.js
var import_react = __toESM(require_react());
function useLatest(value) {
  var ref = (0, import_react.useRef)(value);
  ref.current = value;
  return ref;
}
var useLatest_default = useLatest;

// node_modules/rc-hooks/es/useUpdateEffect/index.js
var import_react3 = __toESM(require_react());

// node_modules/rc-hooks/es/utils/index.js
function isDocumentVisible() {
  if (typeof document !== "undefined" && typeof document.visibilityState !== "undefined") {
    return document.visibilityState !== "hidden";
  }
  return true;
}
function isOnline() {
  if (typeof navigator !== "undefined" && typeof navigator.onLine !== "undefined") {
    return navigator.onLine;
  }
  return true;
}

// node_modules/rc-hooks/es/utils/limit.js
function limit(fn, timespan) {
  var pending = false;
  return function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    if (pending)
      return;
    pending = true;
    fn.apply(void 0, args);
    setTimeout(function() {
      pending = false;
    }, timespan);
  };
}

// node_modules/rc-hooks/es/utils/windowVisible.js
var listeners = [];
function subscribe(listener) {
  listeners.push(listener);
  return function unsubscribe() {
    var index = listeners.indexOf(listener);
    listeners.splice(index, 1);
  };
}
var eventsBinded = false;
if (typeof window !== "undefined" && window.addEventListener && !eventsBinded) {
  revalidate = function() {
    if (!isDocumentVisible())
      return;
    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      listener();
    }
  };
  window.addEventListener("visibilitychange", revalidate, false);
  eventsBinded = true;
}
var revalidate;
var windowVisible_default = subscribe;

// node_modules/rc-hooks/es/utils/windowFocus.js
var listeners2 = [];
function subscribe2(listener) {
  listeners2.push(listener);
  return function unsubscribe() {
    var index = listeners2.indexOf(listener);
    listeners2.splice(index, 1);
  };
}
var eventsBinded2 = false;
if (typeof window !== "undefined" && window.addEventListener && !eventsBinded2) {
  revalidate = function() {
    if (!isDocumentVisible() || !isOnline())
      return;
    for (var i = 0; i < listeners2.length; i++) {
      var listener = listeners2[i];
      listener();
    }
  };
  window.addEventListener("visibilitychange", revalidate, false);
  window.addEventListener("focus", revalidate, false);
  eventsBinded2 = true;
}
var revalidate;
var windowFocus_default = subscribe2;

// node_modules/rc-hooks/es/useAsync/Async.js
var asyncMemo = new AsyncMemo({ prefix: "rc-hooks", stdTTL: 5 * 60 * 1e3 });
var Async = (
  /** @class */
  function() {
    function Async2(async, options) {
      this.params = [];
      this.pollingWhenVisibleFlag = false;
      this.pollingTimer = null;
      this.counter = 1;
      this.destroyed = false;
      this.async = async;
      this.options = __assign({ cacheTime: 5 * 60 * 1e3, persisted: false, pollingWhenHidden: true, refreshOnWindowFocus: false, focusTimespan: 5e3 }, options);
      this.unsubscribes = [];
      this.init();
    }
    Async2.prototype.init = function() {
      var _a = this.options, pollingInterval = _a.pollingInterval, refreshOnWindowFocus = _a.refreshOnWindowFocus, focusTimespan = _a.focusTimespan;
      this.updateDebounce();
      if (pollingInterval) {
        this.unsubscribes.push(windowVisible_default(this.rePolling.bind(this)));
      }
      if (refreshOnWindowFocus) {
        var limitRefresh = limit(this.refresh.bind(this), focusTimespan);
        this.unsubscribes.push(windowFocus_default(limitRefresh));
      }
    };
    Async2.prototype.updateDebounce = function() {
      var _a = this.options, debounceInterval = _a.debounceInterval, throttleInterval = _a.throttleInterval;
      this.debounce = typeof debounceInterval === "number" && debounceInterval > 0 ? debounce(this._run, debounceInterval) : void 0;
      this.throttle = typeof throttleInterval === "number" && throttleInterval > 0 ? throttle(this._run, throttleInterval) : void 0;
    };
    Async2.prototype.rePolling = function() {
      if (this.pollingWhenVisibleFlag) {
        this.pollingWhenVisibleFlag = false;
        this.refresh();
      }
    };
    Async2.prototype.afterUpdateOptions = function(prevOptions, nextOptions) {
      if (nextOptions === void 0) {
        nextOptions = {};
      }
      if ("debounceInterval" in nextOptions && nextOptions.debounceInterval !== prevOptions.debounceInterval || "throttleInterval" in nextOptions && nextOptions.throttleInterval !== prevOptions.throttleInterval) {
        this.updateDebounce();
      }
    };
    Async2.prototype.updateOptions = function(options) {
      var prevOptions = this.options;
      var nextOptions = __assign(__assign({}, this.options), options);
      this.options = nextOptions;
      this.afterUpdateOptions(prevOptions, nextOptions);
    };
    Async2.prototype._run = function() {
      var _this = this;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      if (this.pollingTimer) {
        clearTimeout(this.pollingTimer);
      }
      var count = this.counter;
      this.params = args;
      var _a = this.options, cacheKey = _a.cacheKey, cacheTime = _a.cacheTime, persisted = _a.persisted, formatResult = _a.formatResult, onSuccess = _a.onSuccess, onError = _a.onError, onFinally = _a.onFinally, onBefore = _a.onBefore, pollingWhenHidden = _a.pollingWhenHidden, pollingInterval = _a.pollingInterval;
      onBefore === null || onBefore === void 0 ? void 0 : onBefore(args);
      return new Promise(function(resolve, reject) {
        asyncMemo.run(function() {
          return _this.async.apply(_this, args).then(function(res) {
            return typeof formatResult === "function" ? formatResult(res, args) : res;
          });
        }, cacheKey, { persisted, ttl: cacheTime }).then(function(fmtRes) {
          if (count === _this.counter) {
            onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(fmtRes, args);
            resolve(fmtRes);
          }
        }).catch(function(err) {
          if (count === _this.counter) {
            onError === null || onError === void 0 ? void 0 : onError(err, args);
            reject(err);
          }
        }).finally(function() {
          if (count === _this.counter) {
            onFinally === null || onFinally === void 0 ? void 0 : onFinally();
            if (pollingInterval) {
              if (!isDocumentVisible() && !pollingWhenHidden) {
                _this.pollingWhenVisibleFlag = true;
                return;
              }
              _this.pollingTimer = setTimeout(function() {
                _this.run.apply(_this, args);
              }, pollingInterval);
            }
          }
        });
      });
    };
    Async2.prototype.run = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      if (this.debounce) {
        this.debounce.apply(this, args);
        return Promise.resolve(null);
      }
      if (this.throttle) {
        this.throttle.apply(this, args);
        return Promise.resolve(null);
      }
      this.counter += 1;
      return this._run.apply(this, args);
    };
    Async2.prototype.refresh = function() {
      return this.run.apply(this, this.params);
    };
    Async2.prototype.cancel = function() {
      if (this.debounce) {
        this.debounce.cancel();
      }
      if (this.throttle) {
        this.throttle.cancel();
      }
      if (this.pollingTimer) {
        clearTimeout(this.pollingTimer);
        this.pollingTimer = null;
      }
      this.counter += 1;
    };
    Async2.prototype.destroy = function(needCancel) {
      if (needCancel === void 0) {
        needCancel = true;
      }
      if (needCancel) {
        this.cancel();
      }
      if (!this.destroyed) {
        this.destroyed = true;
        this.unsubscribes.forEach(function(s) {
          return s();
        });
        this.unsubscribes = [];
      }
    };
    Async2.prototype.resume = function() {
      if (this.destroyed) {
        this.destroyed = false;
        this.init();
      }
    };
    return Async2;
  }()
);

// node_modules/rc-hooks/es/useAsync/useLoadMore.js
var import_react6 = __toESM(require_react());

// node_modules/rc-hooks/es/useAsync/useScrollToLower.js
var import_react5 = __toESM(require_react());

// node_modules/rc-hooks/es/useAsync/usePagination.js
var import_react7 = __toESM(require_react());

// node_modules/rc-hooks/es/useDebounceFn/index.js
var import_react9 = __toESM(require_react());

// node_modules/rc-hooks/es/useUnmount/index.js
var import_react8 = __toESM(require_react());

// node_modules/rc-hooks/es/useDebounce/index.js
var import_react10 = __toESM(require_react());

// node_modules/rc-hooks/es/useThrottleFn/index.js
var import_react11 = __toESM(require_react());

// node_modules/rc-hooks/es/useThrottle/index.js
var import_react12 = __toESM(require_react());

// node_modules/rc-hooks/es/useLimitList/index.js
var import_react13 = __toESM(require_react());

// node_modules/rc-hooks/es/useSetState/index.js
var import_react14 = __toESM(require_react());

// node_modules/rc-hooks/es/usePrevious/index.js
var import_react16 = __toESM(require_react());

// node_modules/rc-hooks/es/useMountedRef/index.js
var import_react15 = __toESM(require_react());

// node_modules/rc-hooks/es/useSafeState/index.js
var import_react18 = __toESM(require_react());

// node_modules/rc-hooks/es/useUnmountedRef/index.js
var import_react17 = __toESM(require_react());
var useUnmountedRef = function() {
  var unmountedRef = (0, import_react17.useRef)(false);
  (0, import_react17.useEffect)(function() {
    unmountedRef.current = false;
    return function() {
      unmountedRef.current = true;
    };
  }, []);
  return unmountedRef;
};
var useUnmountedRef_default = useUnmountedRef;

// node_modules/rc-hooks/es/useSafeState/index.js
function useSafeState(initialState) {
  var unmountedRef = useUnmountedRef_default();
  var _a = __read((0, import_react18.useState)(initialState), 2), state = _a[0], setState = _a[1];
  var setCurrentState = (0, import_react18.useCallback)(
    function(nextState) {
      if (unmountedRef.current) {
        return;
      }
      setState(nextState);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []
  );
  return [state, setCurrentState];
}
var useSafeState_default = useSafeState;

// node_modules/rc-hooks/es/useMount/index.js
var import_react19 = __toESM(require_react());
var useMount = function(fn) {
  (0, import_react19.useEffect)(function() {
    fn();
  }, []);
};
var useMount_default = useMount;

// node_modules/rc-hooks/es/useUpdate/index.js
var import_react20 = __toESM(require_react());

// node_modules/rc-hooks/es/useUpdateLayoutEffect/index.js
var import_react21 = __toESM(require_react());

// node_modules/rc-hooks/es/useClickAway/index.js
var import_react22 = __toESM(require_react());

// node_modules/rc-hooks/es/useControllableValue/index.js
var import_react23 = __toESM(require_react());

// node_modules/rc-hooks/es/useSize/index.js
var import_react24 = __toESM(require_react());

// node_modules/rc-slider-captcha/dist/index.esm.js
function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;
  if (typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}
var css_248z = "@-webkit-keyframes slider-icon-animate_spin {\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n@keyframes slider-icon-animate_spin {\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n.rc-slider-captcha-icon {\n  display: inline-block;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.rc-slider-captcha-icon > svg {\n  line-height: 1;\n}\n.rc-slider-captcha-icon-spin {\n  -webkit-animation: slider-icon-animate_spin 1s infinite linear;\n          animation: slider-icon-animate_spin 1s infinite linear;\n}\n.rc-slider-captcha-button {\n  display: inline-block;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  width: 40px;\n  height: 100%;\n  padding: 5px 0;\n  color: #676d73;\n  color: var(--rcsc-button-color, #676d73);\n  font-size: 22px;\n  line-height: 1;\n  background-color: #fff;\n  background-color: var(--rcsc-button-bg-color, #fff);\n  box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);\n  cursor: -webkit-grab;\n  cursor: grab;\n  transition-timing-function: linear;\n  transition-duration: 0.2s;\n  transition-property: background-color, color;\n  touch-action: none;\n}\n.rc-slider-captcha-button-active {\n  color: #fff;\n  color: var(--rcsc-button-hover-color, #fff);\n  background-color: #1991fa;\n  background-color: var(--rcsc-primary, #1991fa);\n}\n.rc-slider-captcha-button-verify {\n  color: #fff;\n  color: var(--rcsc-button-hover-color, #fff);\n  background-color: #1991fa;\n  background-color: var(--rcsc-primary, #1991fa);\n}\n.rc-slider-captcha-button-pc:hover {\n  color: #fff;\n  color: var(--rcsc-button-hover-color, #fff);\n  background-color: #1991fa;\n  background-color: var(--rcsc-primary, #1991fa);\n}\n.rc-slider-captcha-button:active {\n  color: #fff;\n  color: var(--rcsc-button-hover-color, #fff);\n  background-color: #1991fa;\n  background-color: var(--rcsc-primary, #1991fa);\n}\n.rc-slider-captcha-button-active,\n.rc-slider-captcha-button:active {\n  cursor: -webkit-grabbing;\n  cursor: grabbing;\n}\n.rc-slider-captcha-button-verify,\n.rc-slider-captcha-button-verify:active {\n  cursor: wait;\n}\n.rc-slider-captcha-button-error {\n  color: #fff;\n  color: var(--rcsc-button-hover-color, #fff);\n  background-color: #f57a7a;\n  background-color: var(--rcsc-error, #f57a7a);\n  cursor: default;\n}\n.rc-slider-captcha-button-error:hover {\n  color: #fff;\n  color: var(--rcsc-button-hover-color, #fff);\n  background-color: #f57a7a;\n  background-color: var(--rcsc-error, #f57a7a);\n  cursor: default;\n}\n.rc-slider-captcha-button-error:active {\n  color: #fff;\n  color: var(--rcsc-button-hover-color, #fff);\n  background-color: #f57a7a;\n  background-color: var(--rcsc-error, #f57a7a);\n  cursor: default;\n}\n.rc-slider-captcha-button-success {\n  color: #fff;\n  color: var(--rcsc-button-hover-color, #fff);\n  background-color: #52ccba;\n  background-color: var(--rcsc-success, #52ccba);\n  cursor: default;\n}\n.rc-slider-captcha-button-success:hover {\n  color: #fff;\n  color: var(--rcsc-button-hover-color, #fff);\n  background-color: #52ccba;\n  background-color: var(--rcsc-success, #52ccba);\n  cursor: default;\n}\n.rc-slider-captcha-button-success:active {\n  color: #fff;\n  color: var(--rcsc-button-hover-color, #fff);\n  background-color: #52ccba;\n  background-color: var(--rcsc-success, #52ccba);\n  cursor: default;\n}\n.rc-slider-captcha-button-disabled {\n  color: #676d73;\n  color: var(--rcsc-button-color, #676d73);\n  background-color: #fff;\n  background-color: var(--rcsc-button-bg-color, #fff);\n  cursor: no-drop;\n  opacity: 0.7;\n}\n.rc-slider-captcha-button-disabled:hover {\n  color: #676d73;\n  color: var(--rcsc-button-color, #676d73);\n  background-color: #fff;\n  background-color: var(--rcsc-button-bg-color, #fff);\n  cursor: no-drop;\n  opacity: 0.7;\n}\n.rc-slider-captcha-button-disabled:active {\n  color: #676d73;\n  color: var(--rcsc-button-color, #676d73);\n  background-color: #fff;\n  background-color: var(--rcsc-button-bg-color, #fff);\n  cursor: no-drop;\n  opacity: 0.7;\n}\n.rc-slider-captcha-control {\n  position: relative;\n  box-sizing: border-box;\n  width: 100%;\n  height: 42px;\n  height: var(--rcsc-control-height, 42px);\n  background-color: #f7f9fa;\n  background-color: var(--rcsc-bg-color, #f7f9fa);\n  border: 1px solid #e4e7eb;\n  border: 1px solid var(--rcsc-border-color, #e4e7eb);\n  border-radius: 2px;\n  border-radius: var(--rcsc-control-border-radius, 2px);\n}\n.rc-slider-captcha-control-button {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 2;\n  border-radius: 2px;\n  border-radius: var(--rcsc-control-border-radius, 2px);\n}\n.rc-slider-captcha-control-indicator {\n  position: absolute;\n  top: -1px;\n  bottom: -1px;\n  left: -1px;\n  display: none;\n  box-sizing: border-box;\n  width: 0;\n  background-color: #d1e9fe;\n  background-color: var(--rcsc-primary-light, #d1e9fe);\n  border: 1px solid #1991fa;\n  border: 1px solid var(--rcsc-primary, #1991fa);\n  border-radius: 2px;\n  border-radius: var(--rcsc-control-border-radius, 2px);\n}\n.rc-slider-captcha-control-tips {\n  position: relative;\n  z-index: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  color: #45494c;\n  color: var(--rcsc-text-color, #45494c);\n  font-size: 14px;\n  line-height: 20px;\n  text-align: center;\n  -webkit-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n.rc-slider-captcha-control-moving .rc-slider-captcha-control-indicator,\n.rc-slider-captcha-control-verify .rc-slider-captcha-control-indicator,\n.rc-slider-captcha-control-error .rc-slider-captcha-control-indicator,\n.rc-slider-captcha-control-success .rc-slider-captcha-control-indicator {\n  display: block;\n}\n.rc-slider-captcha-control-error .rc-slider-captcha-control-indicator {\n  background-color: #fce1e1;\n  background-color: var(--rcsc-error-light, #fce1e1);\n  border-color: #f57a7a;\n  border-color: var(--rcsc-error, #f57a7a);\n}\n.rc-slider-captcha-control-success .rc-slider-captcha-control-indicator {\n  background-color: #d2f4ef;\n  background-color: var(--rcsc-success-light, #d2f4ef);\n  border-color: #52ccba;\n  border-color: var(--rcsc-success, #52ccba);\n}\n.rc-slider-captcha-control-errors {\n  padding-left: 0;\n  background-color: #fce1e1;\n  background-color: var(--rcsc-error-light, #fce1e1);\n  border-color: #f57a7a;\n  border-color: var(--rcsc-error, #f57a7a);\n}\n.rc-slider-captcha-control-load-failed {\n  padding-left: 0;\n  background-color: #fce1e1;\n  background-color: var(--rcsc-error-light, #fce1e1);\n  border-color: #f57a7a;\n  border-color: var(--rcsc-error, #f57a7a);\n}\n.rc-slider-captcha-control-errors .rc-slider-captcha-control-button,\n.rc-slider-captcha-control-errors .rc-slider-captcha-control-indicator,\n.rc-slider-captcha-control-load-failed .rc-slider-captcha-control-button,\n.rc-slider-captcha-control-load-failed .rc-slider-captcha-control-indicator {\n  display: none;\n}\n.rc-slider-captcha-control-errors .rc-slider-captcha-control-tips {\n  color: #f57a7a;\n  color: var(--rcsc-error, #f57a7a);\n  cursor: pointer;\n}\n.rc-slider-captcha-control-load-failed .rc-slider-captcha-control-tips {\n  color: #f57a7a;\n  color: var(--rcsc-error, #f57a7a);\n  cursor: pointer;\n}\n.rc-slider-captcha-jigsaw {\n  position: relative;\n  background-color: #f7f9fa;\n  -webkit-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n.rc-slider-captcha-jigsaw img {\n  position: absolute;\n}\n.rc-slider-captcha-jigsaw-bg {\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n}\n.rc-slider-captcha-jigsaw-puzzle {\n  width: 60px;\n  height: 100%;\n  touch-action: none;\n}\n.rc-slider-captcha-jigsaw-puzzle:hover {\n  cursor: -webkit-grab;\n  cursor: grab;\n}\n.rc-slider-captcha-jigsaw-puzzle:active {\n  cursor: -webkit-grabbing;\n  cursor: grabbing;\n}\n.rc-slider-captcha-jigsaw-refresh {\n  position: absolute;\n  top: 0;\n  right: 0;\n  z-index: 2;\n  padding: 5px;\n  color: #fff;\n  font-size: 22px;\n  line-height: 0;\n  cursor: pointer;\n  opacity: 0.75;\n  transition: opacity 0.2s linear;\n}\n.rc-slider-captcha-jigsaw-refresh:hover {\n  opacity: 1;\n}\n.rc-slider-captcha-jigsaw-refresh-disabled {\n  cursor: not-allowed;\n}\n.rc-slider-captcha-jigsaw-refresh-disabled:hover {\n  opacity: 0.75;\n}\n.rc-slider-captcha-jigsaw-stop .rc-slider-captcha-jigsaw-puzzle {\n  pointer-events: none;\n}\n.rc-slider-captcha-jigsaw-stop .rc-slider-captcha-jigsaw-puzzle:hover,\n.rc-slider-captcha-jigsaw-stop .rc-slider-captcha-jigsaw-puzzle:active {\n  cursor: default;\n}\n.rc-slider-captcha-loading {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  padding: 15px;\n  color: #45494c;\n  color: var(--rcsc-text-color, #45494c);\n  font-size: 14px;\n  text-align: center;\n  background-color: #f7f9fa;\n  background-color: var(--rcsc-bg-color, #f7f9fa);\n}\n.rc-slider-captcha-loading-icon {\n  font-size: 30px;\n}\n.rc-slider-captcha-loading-text {\n  margin-top: 5px;\n}\n.rc-slider-captcha-load-failed {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  color: #ccc;\n  font-size: 85px;\n  background-color: #f7f9fa;\n  background-color: var(--rcsc-bg-color, #f7f9fa);\n}\n.rc-slider-captcha {\n  position: relative;\n}\n.rc-slider-captcha > * {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n.rc-slider-captcha-panel {\n  padding-bottom: 15px;\n}\n.rc-slider-captcha-panel-inner {\n  overflow: hidden;\n  border-radius: 2px;\n  border-radius: var(--rcsc-panel-border-radius, 2px);\n}\n.rc-slider-captcha-float .rc-slider-captcha-panel {\n  position: absolute;\n  left: 0;\n  display: none;\n  opacity: 0;\n  transition-timing-function: ease-out;\n  transition-duration: 0.3s;\n  transition-property: top, bottom, opacity;\n}\n.rc-slider-captcha-float-top .rc-slider-captcha-panel {\n  bottom: 22px;\n}\n.rc-slider-captcha-float-bottom .rc-slider-captcha-panel {\n  top: 22px;\n  padding: 15px 0 0;\n}\n";
styleInject(css_248z);
var prefixCls = "rc-slider-captcha";
function getClient(e) {
  var x = 0, y = 0;
  if (typeof e.clientX === "number" && typeof e.clientY === "number") {
    x = e.clientX;
    y = e.clientY;
  } else if (e.touches && e.touches[0]) {
    x = e.touches[0].clientX;
    y = e.touches[0].clientY;
  } else if (e.changedTouches && e.changedTouches[0]) {
    x = e.changedTouches[0].clientX;
    y = e.changedTouches[0].clientY;
  }
  return {
    clientX: x,
    clientY: y
  };
}
function setStyle(el, styleObj) {
  if (styleObj === void 0) {
    styleObj = {};
  }
  if (el) {
    for (var prop in styleObj) {
      el.style[prop] = styleObj[prop];
    }
  }
}
var isBrowser2 = typeof window === "object" && window && typeof document === "object" && document && window.document === document && !!document.addEventListener;
var isSupportPointer = isBrowser2 && "onpointerdown" in window;
var isSupportTouch = isBrowser2 && "ontouchstart" in window;
var reflow = function(node) {
  return node === null || node === void 0 ? void 0 : node.scrollTop;
};
function normalizeNumber(num, precision) {
  if (typeof num === "number" && !Number.isNaN(num) && typeof precision === "number" && precision > 0) {
    return Number(num.toFixed(precision));
  }
  return num;
}
var currentPrefixCls$2 = "".concat(prefixCls, "-button");
var SliderButton = import_react25.default.forwardRef(function(_a, ref) {
  var _b;
  var className = _a.className, disabled = _a.disabled, active = _a.active, success = _a.success, error = _a.error, verify = _a.verify, restProps = __rest(_a, ["className", "disabled", "active", "success", "error", "verify"]);
  return import_react25.default.createElement("span", __assign({ className: (0, import_classnames.default)(currentPrefixCls$2, className, (_b = {}, _b["".concat(currentPrefixCls$2, "-disabled")] = disabled, _b["".concat(currentPrefixCls$2, "-active")] = active, _b["".concat(currentPrefixCls$2, "-verify")] = verify, _b["".concat(currentPrefixCls$2, "-success")] = success, _b["".concat(currentPrefixCls$2, "-error")] = error, _b["".concat(currentPrefixCls$2, "-pc")] = !isSupportTouch, _b)), ref }, restProps));
});
SliderButton.displayName = "SliderButton";
var IconArrowRight = function(props) {
  return import_react25.default.createElement(
    "svg",
    __assign({ viewBox: "0 0 1024 1024", version: "1.1", xmlns: "http://www.w3.org/2000/svg", width: "1em", height: "1em", fill: "currentColor" }, props),
    import_react25.default.createElement("path", { d: "M116.9408 561.4592m0-40.96l0 0q0-40.96 40.96-40.96l573.44 0q40.96 0 40.96 40.96l0 0q0 40.96-40.96 40.96l-573.44 0q-40.96 0-40.96-40.96Z" }),
    import_react25.default.createElement("path", { d: "M769.82272 519.43424l-203.22304-203.22304a40.96 40.96 0 1 1 57.91744-57.91744l231.71072 231.71072a40.96 40.96 0 0 1 0.45056 58.44992L624.9472 780.12416a40.96 40.96 0 0 1-57.93792-57.91744l202.79296-202.79296z" })
  );
};
var IconCheck = function(props) {
  return import_react25.default.createElement(
    "svg",
    __assign({ viewBox: "0 0 1024 1024", xmlns: "http://www.w3.org/2000/svg", width: "1em", height: "1em", fill: "currentColor" }, props),
    import_react25.default.createElement("path", { d: "M864.554667 268.501333a42.666667 42.666667 0 0 1 0 60.330667L412.032 781.397333a42.453333 42.453333 0 0 1-22.613333 11.818667l-5.034667 0.597333H379.306667a42.496 42.496 0 0 1-27.648-12.416l-211.2-211.2a42.666667 42.666667 0 1 1 60.330666-60.330666l180.992 180.992 422.4-422.4a42.666667 42.666667 0 0 1 60.330667 0z" })
  );
};
var IconLoading = function(props) {
  return import_react25.default.createElement(
    "svg",
    __assign({ viewBox: "0 0 120 120", width: "1em", height: "1em" }, props),
    import_react25.default.createElement(
      "defs",
      null,
      import_react25.default.createElement("line", { id: "l", x1: "60", x2: "60", y1: "7", y2: "27", stroke: "currentColor", strokeWidth: "11", strokeLinecap: "round" })
    ),
    import_react25.default.createElement(
      "g",
      null,
      import_react25.default.createElement("use", { xlinkHref: "#l", opacity: ".27" }),
      import_react25.default.createElement("use", { xlinkHref: "#l", opacity: ".27", transform: "rotate(30 60,60)" }),
      import_react25.default.createElement("use", { xlinkHref: "#l", opacity: ".27", transform: "rotate(60 60,60)" }),
      import_react25.default.createElement("use", { xlinkHref: "#l", opacity: ".27", transform: "rotate(90 60,60)" }),
      import_react25.default.createElement("use", { xlinkHref: "#l", opacity: ".27", transform: "rotate(120 60,60)" }),
      import_react25.default.createElement("use", { xlinkHref: "#l", opacity: ".27", transform: "rotate(150 60,60)" }),
      import_react25.default.createElement("use", { xlinkHref: "#l", opacity: ".37", transform: "rotate(180 60,60)" }),
      import_react25.default.createElement("use", { xlinkHref: "#l", opacity: ".46", transform: "rotate(210 60,60)" }),
      import_react25.default.createElement("use", { xlinkHref: "#l", opacity: ".56", transform: "rotate(240 60,60)" }),
      import_react25.default.createElement("use", { xlinkHref: "#l", opacity: ".66", transform: "rotate(270 60,60)" }),
      import_react25.default.createElement("use", { xlinkHref: "#l", opacity: ".75", transform: "rotate(300 60,60)" }),
      import_react25.default.createElement("use", { xlinkHref: "#l", opacity: ".85", transform: "rotate(330 60,60)" })
    )
  );
};
var IconRefresh = function(props) {
  return import_react25.default.createElement(
    "svg",
    __assign({ viewBox: "0 0 1024 1024", xmlns: "http://www.w3.org/2000/svg", width: "1em", height: "1em", fill: "currentColor" }, props),
    import_react25.default.createElement("path", { d: "M866.133333 573.013333a42.666667 42.666667 0 0 0-53.333333 27.733334A304.64 304.64 0 0 1 519.68 810.666667 302.933333 302.933333 0 0 1 213.333333 512a302.933333 302.933333 0 0 1 306.346667-298.666667 309.76 309.76 0 0 1 198.4 71.253334l-92.586667-15.36a42.666667 42.666667 0 0 0-49.066666 35.413333 42.666667 42.666667 0 0 0 35.413333 49.066667l180.906667 29.866666h7.253333a42.666667 42.666667 0 0 0 14.506667-2.56 14.08 14.08 0 0 0 4.266666-2.56 33.28 33.28 0 0 0 8.533334-4.693333l3.84-4.693333c0-2.133333 3.84-3.84 5.546666-6.4s0-4.266667 2.133334-5.973334a57.173333 57.173333 0 0 0 2.986666-7.68l32-170.666666a42.666667 42.666667 0 0 0-85.333333-16.213334l-11.52 61.866667A392.96 392.96 0 0 0 519.68 128 388.266667 388.266667 0 0 0 128 512a388.266667 388.266667 0 0 0 391.68 384A389.12 389.12 0 0 0 896 626.346667a42.666667 42.666667 0 0 0-29.866667-53.333334z" })
  );
};
var IconX = function(props) {
  return import_react25.default.createElement(
    "svg",
    __assign({ viewBox: "0 0 1024 1024", xmlns: "http://www.w3.org/2000/svg", width: "1em", height: "1em", fill: "currentColor" }, props),
    import_react25.default.createElement("path", { d: "M572.96896 524.6976l217.23136 217.25184a40.96 40.96 0 1 1-57.93792 57.91744L515.072 582.63552l-212.3776 212.3776a40.96 40.96 0 1 1-57.9584-57.91744l212.39808-212.3776-217.21088-217.23136a40.96 40.96 0 1 1 57.91744-57.91744l217.23136 217.21088L737.0752 244.736a40.96 40.96 0 1 1 57.93792 57.91744L572.96896 524.71808z" })
  );
};
var IconImageFill = function(props) {
  return import_react25.default.createElement(
    "svg",
    __assign({ xmlns: "http://www.w3.org/2000/svg", width: "1em", height: "1em", fill: "currentColor", viewBox: "0 0 16 16" }, props),
    import_react25.default.createElement("path", { d: "M.002 3a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-12a2 2 0 0 1-2-2zm1 9v1a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V9.5l-3.777-1.947a.5.5 0 0 0-.577.093l-3.71 3.71-2.66-1.772a.5.5 0 0 0-.63.062zm5-6.5a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0" })
  );
};
var currentPrefixCls$1 = "".concat(prefixCls, "-icon");
var SliderIconBase = function(_a) {
  var _b;
  var className = _a.className, spin = _a.spin, restProps = __rest(_a, ["className", "spin"]);
  return import_react25.default.createElement("span", __assign({ className: (0, import_classnames.default)(currentPrefixCls$1, (_b = {}, _b["".concat(currentPrefixCls$1, "-spin")] = spin, _b), className) }, restProps));
};
var iconMap = {
  arrowRight: import_react25.default.createElement(IconArrowRight, null),
  check: import_react25.default.createElement(IconCheck, null),
  loading: import_react25.default.createElement(IconLoading, null),
  refresh: import_react25.default.createElement(IconRefresh, null),
  x: import_react25.default.createElement(IconX, null),
  imageFill: import_react25.default.createElement(IconImageFill, null)
};
var SliderIcon = function(_a) {
  var type = _a.type, restProps = __rest(_a, ["type"]);
  return import_react25.default.createElement(SliderIconBase, __assign({}, restProps), iconMap[type]);
};
var Status;
(function(Status2) {
  Status2[Status2["Default"] = 1] = "Default";
  Status2[Status2["Loading"] = 2] = "Loading";
  Status2[Status2["Moving"] = 3] = "Moving";
  Status2[Status2["Verify"] = 4] = "Verify";
  Status2[Status2["Success"] = 5] = "Success";
  Status2[Status2["Error"] = 6] = "Error";
  Status2[Status2["LoadFailed"] = 7] = "LoadFailed";
})(Status || (Status = {}));
var controlPrefixCls = "".concat(prefixCls, "-control");
var SliderButtonDefaultWidth = 40;
var IndicatorBorderWidth = 2;
var ControlBar = function(_a) {
  var _b;
  var _c = _a.status, status = _c === void 0 ? Status.Default : _c, isLimitErrors = _a.isLimitErrors, customTipText = _a.tipText, customTipIcon = _a.tipIcon, sliderButtonProps = _a.sliderButtonProps, indicatorProps = _a.indicatorProps, controlRef = _a.controlRef, restProps = __rest(_a, ["status", "isLimitErrors", "tipText", "tipIcon", "sliderButtonProps", "indicatorProps", "controlRef"]);
  var wrapperRef = (0, import_react25.useRef)(null);
  var sliderButtonRef = (0, import_react25.useRef)(null);
  var indicatorRef = (0, import_react25.useRef)(null);
  var rectRef = (0, import_react25.useRef)({});
  var tipText = (0, import_react25.useMemo)(function() {
    return __assign({ default: "向右拖动滑块填充拼图", loading: "加载中...", moving: null, verifying: null, success: null, error: null, errors: import_react25.default.createElement(
      import_react25.default.Fragment,
      null,
      import_react25.default.createElement(SliderIcon, { type: "x", style: { fontSize: 20 } }),
      " 失败过多，点击重试"
    ), loadFailed: "加载失败，点击重试" }, customTipText);
  }, [customTipText]);
  var tipIcon = (0, import_react25.useMemo)(function() {
    return __assign({ default: import_react25.default.createElement(SliderIcon, { type: "arrowRight" }), loading: import_react25.default.createElement(SliderIcon, { type: "loading", spin: true }), error: import_react25.default.createElement(SliderIcon, { type: "x" }), success: import_react25.default.createElement(SliderIcon, { type: "check" }) }, customTipIcon);
  }, [customTipIcon]);
  var statusViewMap = (0, import_react25.useMemo)(function() {
    var _a2;
    return _a2 = {}, _a2[Status.Default] = [tipText.default, tipIcon.default], _a2[Status.Loading] = [tipText.loading, tipIcon.default], _a2[Status.Moving] = [tipText.moving, tipIcon.default], _a2[Status.Verify] = [tipText.verifying, tipIcon.loading], _a2[Status.Error] = [tipText.error, tipIcon.error], _a2[Status.Success] = [tipText.success, tipIcon.success], _a2[Status.LoadFailed] = [tipText.loadFailed, tipIcon.default], _a2;
  }, [tipText, tipIcon]);
  var getSliderButtonWidth = function(force) {
    var _a2;
    if (force || typeof rectRef.current.sliderButtonWidth !== "number") {
      rectRef.current.sliderButtonWidth = ((_a2 = sliderButtonRef.current) === null || _a2 === void 0 ? void 0 : _a2.clientWidth) || SliderButtonDefaultWidth;
    }
    return rectRef.current.sliderButtonWidth;
  };
  var getIndicatorBorderWidth = function(force) {
    if (force || typeof rectRef.current.indicatorBorderWidth !== "number") {
      if (indicatorRef.current) {
        var indicatorStyles = window.getComputedStyle(indicatorRef.current);
        rectRef.current.indicatorBorderWidth = parseInt(indicatorStyles.borderLeftWidth) + parseInt(indicatorStyles.borderRightWidth);
      } else {
        rectRef.current.indicatorBorderWidth = IndicatorBorderWidth;
      }
    }
    return rectRef.current.indicatorBorderWidth;
  };
  var getRect = function(force) {
    var _a2;
    if (force || !rectRef.current.rect) {
      if (wrapperRef.current) {
        rectRef.current.rect = (_a2 = wrapperRef.current) === null || _a2 === void 0 ? void 0 : _a2.getBoundingClientRect();
      }
    }
    return rectRef.current.rect;
  };
  (0, import_react25.useImperativeHandle)(controlRef, function() {
    return {
      getSliderButtonWidth,
      getIndicatorBorderWidth,
      getRect,
      updateLeft: function(left) {
        var sliderButtonWidth = getSliderButtonWidth();
        var indicatorBorderWidth = getIndicatorBorderWidth();
        setStyle(sliderButtonRef.current, { left: left + "px" });
        setStyle(indicatorRef.current, {
          width: left + sliderButtonWidth + indicatorBorderWidth + "px"
        });
      }
    };
  }, []);
  var isLoading = status === Status.Loading;
  var isMoving = status === Status.Moving;
  var isVerify = status === Status.Verify;
  var isSuccess = status === Status.Success;
  var isError = status === Status.Error;
  var isLoadFailed = status === Status.LoadFailed;
  var currentTipText = isLimitErrors ? tipText.errors : statusViewMap[status][0];
  return import_react25.default.createElement(
    "div",
    __assign({}, restProps, { className: (0, import_classnames.default)(controlPrefixCls, (_b = {}, _b["".concat(controlPrefixCls, "-loading")] = isLoading, _b["".concat(controlPrefixCls, "-moving")] = isMoving, _b["".concat(controlPrefixCls, "-verify")] = isVerify, _b["".concat(controlPrefixCls, "-success")] = isSuccess, _b["".concat(controlPrefixCls, "-error")] = isError, _b["".concat(controlPrefixCls, "-errors")] = isLimitErrors, _b["".concat(controlPrefixCls, "-load-failed")] = isLoadFailed, _b), restProps.className), ref: wrapperRef }),
    import_react25.default.createElement("div", __assign({}, indicatorProps, { className: (0, import_classnames.default)("".concat(controlPrefixCls, "-indicator"), indicatorProps === null || indicatorProps === void 0 ? void 0 : indicatorProps.className), ref: indicatorRef })),
    import_react25.default.createElement(SliderButton, __assign({}, sliderButtonProps, { className: (0, import_classnames.default)("".concat(controlPrefixCls, "-button"), sliderButtonProps === null || sliderButtonProps === void 0 ? void 0 : sliderButtonProps.className), disabled: isLoading, active: isMoving, verify: isVerify, success: isSuccess, error: isError, ref: sliderButtonRef }), statusViewMap[status][1]),
    import_react25.default.createElement("div", { className: (0, import_classnames.default)("".concat(controlPrefixCls, "-tips")), style: currentTipText ? {} : { display: "none" } }, currentTipText)
  );
};
var currentPrefixCls = "".concat(prefixCls, "-loading");
var LoadingBox = function(_a) {
  var _b = _a.icon, icon = _b === void 0 ? import_react25.default.createElement(SliderIcon, { type: "loading", spin: true }) : _b, _c = _a.text, text = _c === void 0 ? "加载中..." : _c, className = _a.className, restProps = __rest(_a, ["icon", "text", "className"]);
  return import_react25.default.createElement(
    "div",
    __assign({ className: (0, import_classnames.default)(currentPrefixCls, className) }, restProps),
    import_react25.default.createElement("div", { className: "".concat(currentPrefixCls, "-icon") }, icon),
    import_react25.default.createElement("div", { className: "".concat(currentPrefixCls, "-text") }, text)
  );
};
var jigsawPrefixCls = "".concat(prefixCls, "-jigsaw");
var defaultConfig = {
  bgSize: {
    width: 320,
    height: 160
  },
  puzzleSize: {
    width: 60,
    left: 0
  },
  loadFailedIcon: import_react25.default.createElement(SliderIcon, { type: "imageFill" }),
  refreshIcon: import_react25.default.createElement(SliderIcon, { type: "refresh" })
};
var Jigsaw = function(_a) {
  var _b, _c;
  var status = _a.status, _d = _a.bgSize, bgSize = _d === void 0 ? defaultConfig.bgSize : _d, _e = _a.puzzleSize, puzzleSize = _e === void 0 ? defaultConfig.puzzleSize : _e, bgUrl = _a.bgUrl, puzzleUrl = _a.puzzleUrl, bgImgProps = _a.bgImgProps, puzzleImgProps = _a.puzzleImgProps, jigsawRef = _a.jigsawRef, loadingBoxProps = _a.loadingBoxProps, _f = _a.loadFailedIcon, loadFailedIcon = _f === void 0 ? defaultConfig.loadFailedIcon : _f, _g = _a.showRefreshIcon, showRefreshIcon = _g === void 0 ? true : _g, _h = _a.refreshIcon, refreshIcon = _h === void 0 ? defaultConfig.refreshIcon : _h, disabledRefresh = _a.disabledRefresh, onRefresh = _a.onRefresh, style = _a.style, className = _a.className, children = _a.children, restProps = __rest(_a, ["status", "bgSize", "puzzleSize", "bgUrl", "puzzleUrl", "bgImgProps", "puzzleImgProps", "jigsawRef", "loadingBoxProps", "loadFailedIcon", "showRefreshIcon", "refreshIcon", "disabledRefresh", "onRefresh", "style", "className", "children"]);
  var puzzleRef = (0, import_react25.useRef)(null);
  (0, import_react25.useImperativeHandle)(jigsawRef, function() {
    return {
      updateLeft: function(left) {
        setStyle(puzzleRef.current, { left: left + "px" });
      }
    };
  });
  if (status === Status.Loading) {
    return import_react25.default.createElement(LoadingBox, __assign({}, loadingBoxProps, { style: __assign(__assign({}, loadingBoxProps === null || loadingBoxProps === void 0 ? void 0 : loadingBoxProps.style), bgSize) }));
  }
  if (status === Status.LoadFailed || !bgUrl || !puzzleUrl) {
    return import_react25.default.createElement("div", { className: "".concat(prefixCls, "-load-failed"), style: bgSize }, loadFailedIcon);
  }
  var isStop = status === Status.Verify || status === Status.Error || status === Status.Success;
  return import_react25.default.createElement(
    "div",
    __assign({ className: (0, import_classnames.default)(jigsawPrefixCls, (_b = {}, _b["".concat(jigsawPrefixCls, "-stop")] = isStop, _b), className), style: __assign(__assign({}, style), bgSize) }, restProps),
    import_react25.default.createElement("img", __assign({ src: bgUrl, alt: "" }, bgImgProps, { className: (0, import_classnames.default)("".concat(jigsawPrefixCls, "-bg"), bgImgProps === null || bgImgProps === void 0 ? void 0 : bgImgProps.className), style: __assign(__assign({}, bgImgProps === null || bgImgProps === void 0 ? void 0 : bgImgProps.style), bgSize) })),
    import_react25.default.createElement("img", __assign({ src: puzzleUrl, alt: "" }, puzzleImgProps, { className: (0, import_classnames.default)("".concat(jigsawPrefixCls, "-puzzle"), puzzleImgProps === null || puzzleImgProps === void 0 ? void 0 : puzzleImgProps.className), style: __assign(__assign({}, puzzleImgProps === null || puzzleImgProps === void 0 ? void 0 : puzzleImgProps.style), puzzleSize), ref: puzzleRef })),
    showRefreshIcon && status !== Status.Success && refreshIcon && import_react25.default.createElement("div", { className: (0, import_classnames.default)("".concat(jigsawPrefixCls, "-refresh"), (_c = {}, _c["".concat(jigsawPrefixCls, "-refresh-disabled")] = status === Status.Verify || disabledRefresh, _c)), onClick: function() {
      if (status !== Status.Verify && !disabledRefresh) {
        onRefresh === null || onRefresh === void 0 ? void 0 : onRefresh();
      }
    } }, refreshIcon),
    children
  );
};
var events = isSupportPointer ? {
  start: "pointerdown",
  move: "pointermove",
  end: "pointerup",
  cancel: "pointercancel"
} : isSupportTouch ? {
  start: "touchstart",
  move: "touchmove",
  end: "touchend",
  cancel: "touchcancel"
} : {
  start: "mousedown",
  move: "mousemove",
  end: "mouseup",
  cancel: "touchcancel"
};
var startEventName = isSupportPointer ? "onPointerDown" : isSupportTouch ? "onTouchStart" : "onMouseDown";
var CurrentTargetType;
(function(CurrentTargetType2) {
  CurrentTargetType2["Puzzle"] = "puzzle";
  CurrentTargetType2["Button"] = "button";
})(CurrentTargetType || (CurrentTargetType = {}));
var SliderCaptcha = function(_a) {
  var _b, _c, _d;
  var _e = _a.mode, outMode = _e === void 0 ? "embed" : _e, _f = _a.limitErrorCount, limitErrorCount = _f === void 0 ? 0 : _f, tipText = _a.tipText, tipIcon = _a.tipIcon, customRefreshIcon = _a.refreshIcon, outBgSize = _a.bgSize, outPuzzleSize = _a.puzzleSize, request = _a.request, _g = _a.autoRequest, autoRequest = _g === void 0 ? true : _g, onVerify = _a.onVerify, _h = _a.autoRefreshOnError, autoRefreshOnError = _h === void 0 ? true : _h, actionRef = _a.actionRef, _j = _a.showRefreshIcon, showRefreshIcon = _j === void 0 ? true : _j, jigsawContent = _a.jigsawContent, _k = _a.errorHoldDuration, errorHoldDuration = _k === void 0 ? 500 : _k, _l = _a.loadingDelay, loadingDelay = _l === void 0 ? 0 : _l, _m = _a.placement, placement = _m === void 0 ? "top" : _m, loadingBoxProps = _a.loadingBoxProps, sliderButtonProps = _a.sliderButtonProps, _o = _a.precision, precision = _o === void 0 ? 7 : _o, className = _a.className, style = _a.style, styles = _a.styles;
  var _p = useSafeState_default(), jigsawImgs = _p[0], setJigsawImgs = _p[1];
  var _q = useSafeState_default(Status.Default), status = _q[0], setStatus = _q[1];
  var latestStatus = useLatest_default(status);
  var controlRef = (0, import_react25.useRef)(null);
  var jigsawRef = (0, import_react25.useRef)(null);
  var panelRef = (0, import_react25.useRef)(null);
  var mode = (0, import_react25.useMemo)(function() {
    return outMode === "float" || outMode === "slider" ? outMode : "embed";
  }, [outMode]);
  var refreshIcon = (0, import_react25.useMemo)(function() {
    if (customRefreshIcon !== void 0) {
      return customRefreshIcon;
    }
    if ((tipIcon === null || tipIcon === void 0 ? void 0 : tipIcon.refresh) !== void 0) {
      return tipIcon.refresh;
    }
  }, [customRefreshIcon, tipIcon]);
  var bgSize = (0, import_react25.useMemo)(function() {
    return __assign(__assign({}, defaultConfig.bgSize), outBgSize);
  }, [outBgSize]);
  var puzzleSize = (0, import_react25.useMemo)(function() {
    return __assign(__assign({}, defaultConfig.puzzleSize), outPuzzleSize);
  }, [outPuzzleSize]);
  var placementPos = (0, import_react25.useMemo)(function() {
    return placement === "bottom" ? "top" : "bottom";
  }, [placement]);
  var internalRef = (0, import_react25.useRef)({
    isPressed: false,
    // 标识是否按下
    trail: [],
    // 移动轨迹
    errorCount: 0,
    // 连续错误次数
    startInfo: { x: 0, y: 0, timestamp: 0 },
    // 鼠标按下或触摸开始信息
    currentTargetType: CurrentTargetType.Button,
    // 当前触发事件的节点，拼图或按钮
    floatTransitionTimer: null,
    // 触发式渐变过渡效果定时器
    floatDelayShowTimer: null,
    // 触发式鼠标移入定时器
    floatDelayHideTimer: null,
    // 触发式鼠标移出定时器
    refreshTimer: null,
    // 自动刷新的定时器
    loadingTimer: null,
    // 延迟加载状态定时器
    sliderButtonWidth: 40,
    // 滑块按钮宽度
    indicatorBorderWidth: 2,
    // 滑轨边框宽度
    ratio: 1,
    // 当滑块或拼图为触发事件的焦点时，两者的变换比例
    buttonMaxDistance: 0,
    // 按钮最大可移动距离
    puzzleMaxDistance: 0
    // 拼图最大可移动距离
  });
  var modeIsSlider = mode === "slider";
  var hasLoadingDelay = typeof loadingDelay === "number" && loadingDelay > 0;
  var isLimitErrors = status === Status.Error && limitErrorCount > 0 && internalRef.current.errorCount >= limitErrorCount;
  var updateMaxDistance = function() {
    internalRef.current.buttonMaxDistance = bgSize.width - internalRef.current.sliderButtonWidth - internalRef.current.indicatorBorderWidth;
    internalRef.current.puzzleMaxDistance = bgSize.width - puzzleSize.width - puzzleSize.left;
  };
  var getControlHeight = function() {
    var _a2;
    return ((_a2 = controlRef.current) === null || _a2 === void 0 ? void 0 : _a2.getRect(true).height) || 42;
  };
  var getJigsawImages = function() {
    return __awaiter(void 0, void 0, void 0, function() {
      var result;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (modeIsSlider)
              return [
                2
                /*return*/
              ];
            if (!request) return [3, 4];
            if (hasLoadingDelay) {
              internalRef.current.loadingTimer = setTimeout(function() {
                setStatus(Status.Loading);
              }, loadingDelay);
            } else {
              setStatus(Status.Loading);
            }
            _a2.label = 1;
          case 1:
            _a2.trys.push([1, 3, , 4]);
            return [4, request()];
          case 2:
            result = _a2.sent();
            if (hasLoadingDelay) {
              clearTimeout(internalRef.current.loadingTimer);
            }
            setJigsawImgs(result);
            setStatus(Status.Default);
            return [3, 4];
          case 3:
            _a2.sent();
            if (hasLoadingDelay) {
              clearTimeout(internalRef.current.loadingTimer);
            }
            setStatus(Status.LoadFailed);
            return [3, 4];
          case 4:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
  var showPanel = function(delay) {
    if (delay === void 0) {
      delay = 300;
    }
    if (mode !== "float" || latestStatus.current === Status.Success) {
      return;
    }
    clearTimeout(internalRef.current.floatTransitionTimer);
    clearTimeout(internalRef.current.floatDelayHideTimer);
    clearTimeout(internalRef.current.floatDelayShowTimer);
    internalRef.current.floatDelayShowTimer = setTimeout(function() {
      var _a2;
      setStyle(panelRef.current, { display: "block" });
      reflow(panelRef.current);
      var controlBarHeight = getControlHeight() + "px";
      setStyle(panelRef.current, (_a2 = {}, _a2[placementPos] = controlBarHeight, _a2.opacity = "1", _a2));
    }, delay);
  };
  var hidePanel = function(delay) {
    if (delay === void 0) {
      delay = 300;
    }
    if (mode !== "float") {
      return;
    }
    clearTimeout(internalRef.current.floatTransitionTimer);
    clearTimeout(internalRef.current.floatDelayHideTimer);
    clearTimeout(internalRef.current.floatDelayShowTimer);
    internalRef.current.floatDelayHideTimer = setTimeout(function() {
      var _a2;
      var controlBarHalfHeight = getControlHeight() / 2 + "px";
      setStyle(panelRef.current, (_a2 = {}, _a2[placementPos] = controlBarHalfHeight, _a2.opacity = "0", _a2));
      internalRef.current.floatTransitionTimer = setTimeout(function() {
        setStyle(panelRef.current, { display: "none" });
      }, 300);
    }, delay);
  };
  var updatePuzzleLeft = function(left) {
    var _a2;
    if (!modeIsSlider) {
      (_a2 = jigsawRef.current) === null || _a2 === void 0 ? void 0 : _a2.updateLeft(left);
    }
  };
  var reset = function() {
    var _a2;
    internalRef.current.isPressed = false;
    setStatus(Status.Default);
    (_a2 = controlRef.current) === null || _a2 === void 0 ? void 0 : _a2.updateLeft(0);
    updatePuzzleLeft(puzzleSize.left);
  };
  var refresh = function(resetErrorCount) {
    if (resetErrorCount === void 0) {
      resetErrorCount = false;
    }
    if (resetErrorCount) {
      internalRef.current.errorCount = 0;
    }
    clearTimeout(internalRef.current.refreshTimer);
    if (latestStatus.current === Status.Loading) {
      return;
    }
    reset();
    getJigsawImages();
  };
  var handleClickControl = function() {
    if (isLimitErrors || status === Status.LoadFailed) {
      refresh(isLimitErrors);
    }
  };
  var handleMouseEnter = function() {
    if (isSupportTouch) {
      return;
    }
    showPanel();
  };
  var handleMouseLeave = function() {
    if (isSupportTouch) {
      return;
    }
    hidePanel();
  };
  var touchstartPuzzle = function(e) {
    internalRef.current.currentTargetType = CurrentTargetType.Puzzle;
    touchstart(e);
  };
  var touchstartSliderButton = function(e) {
    internalRef.current.currentTargetType = CurrentTargetType.Button;
    touchstart(e);
  };
  var touchstart = function(e) {
    if (latestStatus.current !== Status.Default) {
      return;
    }
    e.preventDefault();
    var _a2 = getClient(e), clientX = _a2.clientX, clientY = _a2.clientY;
    internalRef.current.startInfo = {
      x: clientX,
      y: clientY,
      timestamp: (/* @__PURE__ */ new Date()).getTime()
    };
    internalRef.current.trail = [[clientX, clientY]];
    if (controlRef.current) {
      internalRef.current.sliderButtonWidth = controlRef.current.getSliderButtonWidth(true);
      internalRef.current.indicatorBorderWidth = controlRef.current.getIndicatorBorderWidth(true);
    }
    updateMaxDistance();
    internalRef.current.ratio = internalRef.current.puzzleMaxDistance / internalRef.current.buttonMaxDistance;
    if (internalRef.current.currentTargetType === CurrentTargetType.Puzzle) {
      internalRef.current.ratio = 1 / internalRef.current.ratio;
    }
    if (isSupportTouch || e.pointerType === "pen" || e.pointerType === "touch") {
      showPanel(0);
    }
    internalRef.current.isPressed = true;
    document.addEventListener(events.move, touchmove);
    document.addEventListener(events.end, touchend);
    document.addEventListener(events.cancel, touchend);
  };
  var touchmove = function(e) {
    var _a2;
    if (!internalRef.current.isPressed) {
      return;
    }
    e.preventDefault();
    var _b2 = getClient(e), clientX = _b2.clientX, clientY = _b2.clientY;
    var diffX = clientX - internalRef.current.startInfo.x;
    internalRef.current.trail.push([clientX, clientY]);
    if (latestStatus.current !== Status.Moving && diffX > 0) {
      setStatus(Status.Moving);
    }
    var puzzleLeft = diffX;
    var sliderButtonLeft = diffX;
    if (internalRef.current.currentTargetType === CurrentTargetType.Puzzle) {
      diffX = Math.max(0, Math.min(diffX, internalRef.current.puzzleMaxDistance));
      puzzleLeft = diffX + puzzleSize.left;
      sliderButtonLeft = diffX * internalRef.current.ratio;
    } else {
      diffX = Math.max(0, Math.min(diffX, internalRef.current.buttonMaxDistance));
      sliderButtonLeft = diffX;
      puzzleLeft = diffX * internalRef.current.ratio + puzzleSize.left;
    }
    (_a2 = controlRef.current) === null || _a2 === void 0 ? void 0 : _a2.updateLeft(sliderButtonLeft);
    updatePuzzleLeft(puzzleLeft);
  };
  var touchend = function(e) {
    document.removeEventListener(events.move, touchmove);
    document.removeEventListener(events.end, touchend);
    document.removeEventListener(events.cancel, touchend);
    if (!internalRef.current.isPressed) {
      return;
    }
    if (latestStatus.current !== Status.Moving) {
      internalRef.current.isPressed = false;
      if (isSupportTouch) {
        hidePanel();
      }
      return;
    }
    if (onVerify) {
      internalRef.current.isPressed = false;
      setStatus(Status.Verify);
      var endTimestamp = (/* @__PURE__ */ new Date()).getTime();
      var _a2 = getClient(e), clientX = _a2.clientX, clientY = _a2.clientY;
      var diffY = clientY - internalRef.current.startInfo.y;
      var diffX = clientX - internalRef.current.startInfo.x;
      var sliderOffsetX = diffX;
      if (internalRef.current.currentTargetType === CurrentTargetType.Puzzle) {
        diffX = Math.max(0, Math.min(diffX, internalRef.current.puzzleMaxDistance));
        sliderOffsetX = diffX * internalRef.current.ratio;
      } else {
        diffX = Math.max(0, Math.min(diffX, internalRef.current.buttonMaxDistance));
        sliderOffsetX = diffX;
        diffX *= internalRef.current.ratio;
      }
      onVerify({
        x: normalizeNumber(diffX, precision),
        y: normalizeNumber(diffY, precision),
        sliderOffsetX: normalizeNumber(sliderOffsetX, precision),
        duration: endTimestamp - internalRef.current.startInfo.timestamp,
        trail: internalRef.current.trail,
        targetType: internalRef.current.currentTargetType,
        errorCount: internalRef.current.errorCount
      }).then(function() {
        internalRef.current.errorCount = 0;
        setStatus(Status.Success);
        hidePanel();
      }).catch(function() {
        internalRef.current.errorCount += 1;
        setStatus(Status.Error);
        if (isSupportTouch || e.pointerType === "pen" || e.pointerType === "touch") {
          hidePanel();
        }
        if ((limitErrorCount <= 0 || internalRef.current.errorCount < limitErrorCount) && autoRefreshOnError) {
          internalRef.current.refreshTimer = setTimeout(function() {
            refresh();
          }, errorHoldDuration);
        }
      });
    } else {
      reset();
    }
  };
  useMount_default(function() {
    if (autoRequest) {
      getJigsawImages();
    }
  });
  (0, import_react25.useImperativeHandle)(actionRef, function() {
    return {
      refresh,
      get status() {
        return latestStatus.current;
      }
    };
  });
  return import_react25.default.createElement(
    "div",
    { className: (0, import_classnames.default)(prefixCls, className, "".concat(prefixCls, "-").concat(mode), (_b = {}, _b["".concat(prefixCls, "-").concat(mode, "-").concat(placement)] = mode === "float", _b)), style: __assign({ width: bgSize.width }, style), onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave },
    !modeIsSlider && import_react25.default.createElement(
      "div",
      { className: "".concat(prefixCls, "-panel"), ref: panelRef },
      import_react25.default.createElement(
        "div",
        { className: "".concat(prefixCls, "-panel-inner"), style: __assign(__assign({}, styles === null || styles === void 0 ? void 0 : styles.panel), { height: bgSize.height }) },
        import_react25.default.createElement(Jigsaw, { status, bgSize, puzzleSize, bgUrl: jigsawImgs === null || jigsawImgs === void 0 ? void 0 : jigsawImgs.bgUrl, puzzleUrl: jigsawImgs === null || jigsawImgs === void 0 ? void 0 : jigsawImgs.puzzleUrl, jigsawRef, loadingBoxProps, loadFailedIcon: tipIcon === null || tipIcon === void 0 ? void 0 : tipIcon.loadFailed, showRefreshIcon, refreshIcon, disabledRefresh: isLimitErrors, onRefresh: refresh, style: styles === null || styles === void 0 ? void 0 : styles.jigsaw, bgImgProps: { style: styles === null || styles === void 0 ? void 0 : styles.bgImg }, puzzleImgProps: (_c = {
          style: styles === null || styles === void 0 ? void 0 : styles.puzzleImg
        }, _c[startEventName] = touchstartPuzzle, _c) }, jigsawContent)
      )
    ),
    import_react25.default.createElement(ControlBar, { status, isLimitErrors, tipText, tipIcon, style: styles === null || styles === void 0 ? void 0 : styles.control, onClick: handleClickControl, indicatorProps: { style: styles === null || styles === void 0 ? void 0 : styles.indicator }, sliderButtonProps: __assign(__assign({}, sliderButtonProps), (_d = {}, _d[startEventName] = touchstartSliderButton, _d)), controlRef })
  );
};
export {
  CurrentTargetType,
  Status,
  SliderCaptcha as default
};
//# sourceMappingURL=rc-slider-captcha.js.map
