import { isNaN } from 'ut2';
import { transformEffectiveNumber, digitLength } from './utils/math.util.js';
import times from './times.js';

function plus() {
    var nums = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        nums[_i] = arguments[_i];
    }
    var num1 = nums[0];
    var num2 = nums[1] === void 0 ? 0 : nums[1];
    var rest = nums.slice(2);
    if (rest.length > 0) {
        return plus.apply(void 0, [plus(num1, num2)].concat(rest));
    }
    num1 = transformEffectiveNumber(num1);
    num2 = transformEffectiveNumber(num2);
    if (isNaN(num1) || isNaN(num2)) {
        return Number.NaN;
    }
    var baseNum = Math.pow(10, Math.max(digitLength(num1), digitLength(num2)));
    return (times(num1, baseNum) + times(num2, baseNum)) / baseNum;
}

export { plus as default };
