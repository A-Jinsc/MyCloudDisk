import { isNaN } from 'ut2';
import { transformEffectiveNumber, float2Fixed, checkBoundary, strip, digitLength } from './utils/math.util.js';
import times from './times.js';

function divide() {
    var nums = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        nums[_i] = arguments[_i];
    }
    var num1 = nums[0];
    var num2 = nums[1] === void 0 ? 1 : nums[1];
    var rest = nums.slice(2);
    if (rest.length > 0) {
        return divide.apply(void 0, [divide(num1, num2)].concat(rest));
    }
    num1 = transformEffectiveNumber(num1);
    num2 = transformEffectiveNumber(num2);
    if (isNaN(num1) || isNaN(num2)) {
        return Number.NaN;
    }
    var num1Changed = float2Fixed(num1);
    var num2Changed = float2Fixed(num2);
    checkBoundary(num1Changed);
    checkBoundary(num2Changed);
    return times(num1Changed / num2Changed, strip(Math.pow(10, digitLength(num2) - digitLength(num1))));
}

export { divide as default };
