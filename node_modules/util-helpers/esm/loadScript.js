import { __rest, __assign } from 'tslib';
import { objectKeys } from './utils/native.js';

function loadScript(src, options) {
    return new Promise(function (resolve, reject) {
        var container = document.head || document.getElementsByTagName('head')[0] || document.body;
        var script = document.createElement('script');
        var _a = options || {}, attrs = _a.attrs, _b = _a.destroyOnError, destroyOnError = _b === void 0 ? true : _b, restOptions = __rest(_a, ["attrs", "destroyOnError"]);
        var props = __assign(__assign({ async: true, type: 'text/javascript' }, restOptions), { src: src });
        for (var key in props) {
            if (key === 'onload' || key === 'onerror') {
                continue;
            }
            script[key] = props[key];
        }
        if (typeof attrs === 'object') {
            objectKeys(attrs).forEach(function (key) {
                script.setAttribute(key, attrs[key]);
            });
        }
        script.onload = function (ev) {
            var _a;
            this.onerror = this.onload = null;
            (_a = props.onload) === null || _a === void 0 ? void 0 : _a.call(this, ev);
            resolve(script);
        };
        script.onerror = function (ev) {
            var _a;
            this.onerror = this.onload = null;
            (_a = props.onerror) === null || _a === void 0 ? void 0 : _a.call(this, ev);
            if (destroyOnError) {
                container.removeChild(script);
            }
            reject(new URIError('Failed to load ' + this.src));
        };
        container.appendChild(script);
    });
}

export { loadScript as default };
