(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
    typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.rcHooks = {}, global.React));
})(this, (function (exports, react) { 'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise, SuppressedError, Symbol, Iterator */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    var nativeUndefined = void 0;
    var stringUndefined = 'undefined';
    var objectProto = Object.prototype;
    var objectProtoToString = objectProto.toString;
    var mathRandom = Math.random;
    var stringTag = '[object String]';
    var symbolTag = '[object Symbol]';
    var argumentsTag = '[object Arguments]';
    var windowTag = '[object Window]';

    function isArray(value) {
        return Array.isArray(value);
    }

    function isObjectLike(value) {
        return value !== null && typeof value === 'object';
    }

    function isObject(value) {
        return typeof value === 'function' || isObjectLike(value);
    }

    function getTag(value) {
        return objectProtoToString.call(value);
    }

    function isSymbol(value) {
        return typeof value === 'symbol' || getTag(value) === symbolTag;
    }

    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    function toNumber(value) {
        if (typeof value === 'number') {
            return value;
        }
        if (isSymbol(value)) {
            return NaN;
        }
        if (isObject(value)) {
            value = Number(value);
        }
        if (typeof value !== 'string') {
            return value === 0 ? value : +value;
        }
        value = value.trim();
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? parseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NaN : +value;
    }

    var defaultTo = function (value, defaultValue) {
        return value == null || value !== value ? defaultValue : value;
    };

    var isBrowser = typeof window !== stringUndefined && isObjectLike(window) && typeof document !== stringUndefined && isObjectLike(document) && window.document === document;
    getTag((function () { return arguments; })()) === argumentsTag;
    var FUNC_ERROR_TEXT = 'Expected a function';

    function baseDebounce(func, wait, immediate, __throttle__) {
        if (__throttle__ === void 0) { __throttle__ = false; }
        if (typeof func !== 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
        }
        var timer, lastCallTime, lastInvokeTime, lastArgs, lastThis, result;
        wait = defaultTo(toNumber(wait), 0);
        function shouldInvoke(time) {
            if (lastCallTime === nativeUndefined) {
                return true;
            }
            var timeSinceLastCall = time - lastCallTime;
            var timeSinceLastInvoke = time - lastInvokeTime;
            return timeSinceLastCall >= wait || timeSinceLastCall < 0 || (__throttle__ && timeSinceLastInvoke >= wait);
        }
        function invokeFunc(time) {
            lastInvokeTime = time;
            result = func.apply(lastThis, lastArgs);
            lastThis = lastArgs = nativeUndefined;
            return result;
        }
        function debounced() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            lastThis = this;
            lastArgs = args;
            var time = Date.now();
            var isInvoke = shouldInvoke(time);
            var waitTime = !__throttle__ ? wait : !isInvoke && lastCallTime !== nativeUndefined && timer === nativeUndefined ? wait - (time - lastCallTime) : wait;
            lastCallTime = time;
            if (isInvoke) {
                if (immediate && timer === nativeUndefined) {
                    return invokeFunc(time);
                }
            }
            if (timer !== nativeUndefined && !__throttle__) {
                clearTimeout(timer);
                timer = nativeUndefined;
            }
            if (timer === nativeUndefined) {
                timer = setTimeout(function () {
                    timer = nativeUndefined;
                    invokeFunc(Date.now());
                }, waitTime);
            }
            return result;
        }
        function cancel() {
            if (timer !== nativeUndefined) {
                clearTimeout(timer);
                timer = nativeUndefined;
            }
            lastCallTime = timer = lastArgs = lastThis = nativeUndefined;
        }
        function flush() {
            if (timer !== nativeUndefined) {
                clearTimeout(timer);
                timer = nativeUndefined;
                if (lastArgs) {
                    return invokeFunc(Date.now());
                }
            }
            return result;
        }
        function pending() {
            return timer !== nativeUndefined;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        debounced.pending = pending;
        return debounced;
    }

    function debounce(func, wait, immediate) {
        if (wait === void 0) { wait = 0; }
        if (immediate === void 0) { immediate = false; }
        return baseDebounce(func, wait, immediate);
    }

    function throttle(func, wait, immediate) {
        if (wait === void 0) { wait = 0; }
        if (immediate === void 0) { immediate = true; }
        return baseDebounce(func, wait, immediate, true);
    }

    function isString(value) {
        return typeof value === 'string' || getTag(value) === stringTag;
    }

    function isWindow(value) {
        return isObjectLike(value) && getTag(value) === windowTag;
    }

    function castArray(value) {
        if (!arguments.length) {
            return [];
        }
        return isArray(value) ? value : [value];
    }

    function noop() { }

    var idCounter = 0;
    var defaultPrefix$1 = '_' + mathRandom().toString(36).substring(2, 4);
    function uniqueId(prefix) {
        if (prefix === void 0) { prefix = defaultPrefix$1; }
        return '' + prefix + ++idCounter;
    }

    /**
     * 返回最新的 state 或 props 。
     *
     * @param value state 或 props 的值。
     * @returns
     * @example
     * const [count, setCount] = React.useState(0);
     * // 最新的 count 值。可以在其他 hook 中使用，而不需要依赖它触发更新。
     * const latestCount = useLatest(count);
     */
    function useLatest(value) {
        var ref = react.useRef(value);
        ref.current = value;
        return ref;
    }

    /**
     * 持久化 function 的 Hook。
     *
     * @see {@link https://zh-hans.reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback | 如何从 useCallback 读取一个经常变化的值？}
     * @param fn 需要持久化的函数。
     * @returns 引用地址永远不会变化的 `fn`。
     * @example
     * const [text, updateText] = useState('');
     *
     * // 该函数不会变化
     * const handleSubmit = usePersistFn(() => {
     *   // 可以获取到最新的 state
     *   alert(text);
     * });
     */
    function usePersistFn(fn) {
        var ref = useLatest(fn);
        var persistFn = react.useCallback(function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var refFn = ref.current;
            return refFn === null || refFn === void 0 ? void 0 : refFn.apply(void 0, args);
        }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        []);
        return persistFn;
    }

    /**
     * 只在依赖更新时执行的 useEffect Hook。
     *
     * @param {Function} effect 可执行函数。
     * @param {Array} [deps] 可选项，传入依赖变化的对象。
     * @example
     * const [count, setCount] = useState(0);
     *
     * useUpdateEffect(() => {
     *   // 初次加载不触发，再更新后触发
     *   // do something
     *
     *   return () => {
     *     // 卸载时触发
     *   };
     * }, [count]);
     */
    var useUpdateEffect = function (effect, deps) {
        var isMounted = react.useRef(false);
        react.useEffect(function () {
            if (!isMounted.current) {
                isMounted.current = true;
            }
            else {
                return effect();
            }
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, deps);
    };

    /**
     * 事件触发器，支持浏览器端和 node 端。
     *
     * @class
     * @example
     *
     * const emitter = new Emitter();
     *
     * // 注册监听方法
     * emitter.on('foo', () => console.log('foo 1'));
     * emitter.on('foo', () => console.log('foo 2'));
     *
     * // 触发方法
     * emitter.emit('foo');
     * // foo 1
     * // foo 2
     *
     * // 取消监听方法
     * emitter.off('foo');
     *
     * // 支持链式调用
     * emitter.on('foo', () => {})
     *  .on('foo', () => {})
     *  .off('foo');
     */
    var EmitterPro = /** @class */ (function () {
        function EmitterPro() {
            this.handlers = {};
        }
        /**
         * 获取全部事件名称。
         *
         * @returns 事件名称数组。
         * @example
         * emitter.on('foo', () => {});
         * emitter.on('bar', () => {});
         *
         * emitter.eventNames(); // ['foo', 'bar']
         */
        EmitterPro.prototype.eventNames = function () {
            var _a;
            var symbols = ((_a = Object.getOwnPropertySymbols) === null || _a === void 0 ? void 0 : _a.call(Object, this.handlers)) || [];
            var keys = Object.keys(this.handlers);
            return keys.concat(symbols);
        };
        /**
         * 获取事件名称的全部监听方法（原始方法，未经过包装处理）。
         *
         * @param eventName 事件名称
         * @returns 对应事件名称的监听方法数组
         * @example
         * const fn1 = () => console.log('bar');
         * const fn2 = () => console.log('baz');
         *
         * emitter.on('test', fn1);
         * emitter.once('test', fn2);
         *
         * emitter.rawListeners('test'); // [fn1, fn2]
         */
        EmitterPro.prototype.rawListeners = function (eventName) {
            var handler = this.handlers[eventName];
            return handler ? handler.map(function (item) { return item.raw; }) : [];
        };
        /**
         * 获取事件名称的全部监听方法（如通过 `once` 方法注册，返回的是包装方法）。
         *
         * @param eventName 事件名称
         * @returns 对应事件名称的监听方法数组
         * @example
         * const fn1 = () => console.log('bar');
         * const fn2 = () => console.log('baz');
         *
         * emitter.on('test', fn1);
         * emitter.once('test', fn2);
         *
         * emitter.rawListeners('test'); // [fn1, wrapFn2]
         */
        EmitterPro.prototype.listeners = function (eventName) {
            var handler = this.handlers[eventName];
            return handler ? handler.map(function (item) { return item.wrap; }) : [];
        };
        /**
         * 判断事件名称对应的监听方法是否存在。
         *
         * @param eventName 事件名称
         * @param listener 监听方法
         * @returns 如果事件名称存在该事件方法返回 `true`，否则返回 `false`。
         * @example
         * const fn1 = () => console.log('bar');
         * const fn2 = () => console.log('baz');
         *
         * emitter.on('test', fn1);
         * emitter.once('test', fn2);
         *
         * emitter.hasListener('test', fn1); // true
         * emitter.hasListener('test', fn2); // true
         *
         * // fn2 是通过 once 方法注册，执行一次后自动解绑
         * emitter.emit('test');
         *
         * emitter.hasListener('test', fn1); // true
         * emitter.hasListener('test', fn2); // false
         */
        EmitterPro.prototype.hasListener = function (eventName, listener) {
            return this.rawListeners(eventName).some(function (item) { return item === listener; });
        };
        EmitterPro.prototype._on = function (eventName, raw, wrap, context, dir) {
            if (context === void 0) { context = null; }
            if (dir === void 0) { dir = 1; }
            var currentListener = { raw: raw, wrap: wrap, context: context };
            if (!this.handlers[eventName]) {
                this.handlers[eventName] = [currentListener];
            }
            else {
                var appendMethod = dir === 1 ? 'push' : 'unshift';
                this.handlers[eventName][appendMethod](currentListener);
            }
            return this;
        };
        /**
         * 注册监听方法。同 `on` 方法，只是将监听方法添加到最前面（事件触发是按顺序执行）。
         *
         * @param eventName 事件名称
         * @param listener 监听方法
         * @param context 执行上下文
         * @returns 事件触发器实例。
         * @example
         * emitter.on('foo', () => console.log('bar'));
         * emitter.prependListener('foo', () => console.log(42));
         *
         * emitter.emit('foo');
         * // 42
         * // bar
         */
        EmitterPro.prototype.prependListener = function (eventName, listener, context) {
            return this._on(eventName, listener, listener, context, 0);
        };
        /**
         * 注册监听方法。允许多次添加同一引用的函数。
         *
         * @param eventName 事件名称
         * @param listener 监听方法
         * @param context 执行上下文
         * @returns 事件触发器实例。
         * @example
         * emitter.on('foo', () => console.log('bar'));
         * emitter.on('foo', () => console.log(42));
         *
         * emitter.emit('foo');
         * // bar
         * // 42
         */
        EmitterPro.prototype.on = function (eventName, listener, context) {
            return this._on(eventName, listener, listener, context);
        };
        EmitterPro.prototype._wrapOnce = function (eventName, listener, context) {
            var _this = this;
            if (context === void 0) { context = null; }
            var wrap = (function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                listener.apply(context, args);
                _this.off(eventName, wrap);
            });
            return wrap;
        };
        /**
         * 仅触发一次的监听方法。使用方法同 `on` 。
         *
         * @param eventName 事件名称
         * @param listener 监听方法
         * @param context 执行上下文
         * @returns 事件触发器实例。
         * @example
         * emitter.on('foo', () => console.log('bar'));
         * emitter.once('foo', () => console.log(42));
         *
         * emitter.emit('foo');
         * // bar
         * // 42
         *
         * emitter.emit('foo');
         * // bar
         */
        EmitterPro.prototype.once = function (eventName, listener, context) {
            var wrap = this._wrapOnce(eventName, listener, context);
            return this._on(eventName, listener, wrap, context);
        };
        /**
         * 仅触发一次的监听方法。同 `once` 方法，只是添加到最前面（事件触发是按顺序执行）。
         *
         * @param eventName 事件名称
         * @param listener 监听方法
         * @param context 执行上下文
         * @returns 事件触发器实例。
         * @example
         * emitter.on('foo', () => console.log('bar'));
         * emitter.prependOnceListener('foo', () => console.log(42));
         *
         * emitter.emit('foo');
         * // 42
         * // bar
         *
         * emitter.emit('foo');
         * // bar
         */
        EmitterPro.prototype.prependOnceListener = function (eventName, listener, context) {
            var wrap = this._wrapOnce(eventName, listener, context);
            return this._on(eventName, listener, wrap, context, 0);
        };
        /**
         * 取消监听方法。如果不传第二个参数，将取消该事件名称的全部监听方法。如果多次添加同一引用的函数，需要多次删除。
         *
         * @param eventName 事件名称
         * @param listener 监听方法
         * @returns 事件触发器实例。
         * @example
         * const fn = () => console.log('bar');
         * emitter.on('foo', fn);
         * emitter.on('foo', () => console.log('baz'));
         * emitter.on('foo', () => console.log(42));
         *
         * emitter.emit('foo');
         * // bar
         * // baz
         * // 42
         *
         * emitter.off('foo', fn); // 取消 foo 的监听方法 fn
         *
         * emitter.emit('foo');
         * // bar
         * // 42
         *
         * emitter.off('foo'); // 取消 foo 的全部监听方法
         * emitter.emit('foo'); // 什么都没发生
         */
        EmitterPro.prototype.off = function (eventName, listener) {
            var handler = this.handlers[eventName];
            if (handler) {
                if (listener) {
                    var index = handler.findIndex(function (item) { return item.wrap === listener || item.raw === listener; });
                    if (index !== -1) {
                        handler.splice(index, 1);
                    }
                }
                else {
                    delete this.handlers[eventName];
                }
            }
            return this;
        };
        /**
         * 取消全部事件名称的监听方法。
         *
         * @returns 事件触发器实例。
         * @example
         * const fn = () => console.log('bar');
         * emitter.on('test', fn);
         * emitter.on('test', () => console.log('baz'));
         * emitter.on('test', () => console.log(42));
         *
         * emitter.on('other', fn);
         * emitter.on('other', () => console.log('baz'));
         *
         * emitter.emit('test');
         * // bar
         * // baz
         * // 42
         *
         * emitter.emit('other');
         * // bar
         * // baz
         *
         * emitter.offAll(); // 取消全部监听方法
         *
         * emitter.emit('test'); // 什么都没发生
         * emitter.emit('other'); // 什么都没发生
         */
        EmitterPro.prototype.offAll = function () {
            this.handlers = {};
            return this;
        };
        /**
         * 触发监听方法。
         *
         * @param eventName 事件名称
         * @param args 触发监听方法的参数（从第二个参数开始都将传给监听方法）
         * @returns 如果触发成功返回 `true`，否则返回 `false`。
         * @example
         * emitter.on('foo', () => console.log('bar'));
         * emitter.on('foo', () => console.log(42));
         *
         * emitter.emit('foo');
         * // bar
         * // 42
         *
         * // 支持传入参数
         * emitter.on('test' (a, b) => console.log(a + b));
         * emitter.on('test' (a, b) => console.log(a * b));
         *
         * emitter.emit('other', 2, 5);
         * // 7
         * // 10
         *
         * emitter.emit('other', 5, 5);
         * // 10
         * // 25
         */
        EmitterPro.prototype.emit = function (eventName) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var handler = this.handlers[eventName];
            if (handler && handler.length > 0) {
                handler.forEach(function (listener) {
                    listener.wrap.apply(listener.context, args);
                });
                return true;
            }
            return false;
        };
        return EmitterPro;
    }());

    var cache = {};
    var MemoryStorage = /** @class */ (function () {
        function MemoryStorage(scope) {
            if (scope === void 0) { scope = 'default'; }
            this.scope = scope;
            if (!cache[this.scope]) {
                cache[this.scope] = {};
            }
            this.data = cache[this.scope];
        }
        MemoryStorage.prototype.getItem = function (key) {
            return key in this.data ? this.data[key] : null;
        };
        MemoryStorage.prototype.setItem = function (key, value) {
            this.data[key] = value;
        };
        MemoryStorage.prototype.removeItem = function (key) {
            delete this.data[key];
        };
        MemoryStorage.prototype.clear = function () {
            cache[this.scope] = {};
            this.data = cache[this.scope];
        };
        return MemoryStorage;
    }());

    // 随机字符串
    function randomString() {
        return Math.random().toString(16).substring(2, 8);
    }
    // 是否支持 storage
    function isStorageSupported(storage) {
        try {
            var isSupport = typeof storage === 'object' &&
                storage !== null &&
                !!storage.setItem &&
                !!storage.getItem &&
                !!storage.removeItem;
            if (isSupport) {
                var key = randomString() + new Date().getTime();
                var value = '1';
                storage.setItem(key, value);
                if (storage.getItem(key) !== value) {
                    return false;
                }
                storage.removeItem(key);
            }
            return isSupport;
        }
        catch (e) {
            console.error("[cache2] ".concat(storage, " is not supported. The default memory cache will be used."));
            return false;
        }
    }
    function parse(value, reviver) {
        try {
            return JSON.parse(value, reviver);
        }
        catch (e) {
            return value;
        }
    }
    function stringify(value, replacer) {
        return JSON.stringify(value, replacer);
    }

    /**
     * 数据存储管理。
     *
     * @class
     * @param {Object} [storage] 自定义缓存对象要包含 `getItem` `setItem` `removeItem` 方法。默认使用内存缓存。
     * @param {Object} [options] 配置项。可选。
     * @param {boolean} [options.needParsed] 存取数据时是否需要序列化和解析数据。如果使用内置的内存缓存，默认 `false`，如果自定义 `storage` 默认 `true`。
     * @param {Function} [options.replacer] 数据存储时序列化的参数，透传给 [JSON.stringify](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) 的 `replacer` 参数。仅在 `needParsed=true` 时生效。
     * @param {Function} [options.reviver] 数据获取时转换的参数，透传给 [JSON.parse](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) 的 `reviver` 参数。仅在 `needParsed=true` 时生效。
     * @param {string} [options.prefix] 缓存键前缀。便于管理同域名下的不同项目缓存。
     * @example
     * // 使用内存缓存
     * const memory = new Storage();
     * memory.set('foo', { baz: 42 });
     * memory.get('foo');
     * // { baz: 42 }
     *
     * // 自定义缓存 sessionStorage 。
     * const session = new Storage(window.sessionStorage);
     * session.set('foo', { a: 1, b: ['bar'], c: ['x', 2, 3] });
     * session.get('foo');
     * // { a: 1, b: ['bar'], c: ['x', 2, 3] }
     *
     * session.del('foo'); // 删除缓存
     * session.get('foo');
     * // null
     *
     * // 使用缓存键前缀。
     * // 如果要使用内存缓存， storage 传 `undefined`。
     * const local = new Storage(window.localStorage, { prefix: 'project_name' });
     * local.set('foo', { baz: 42 });
     * local.get('foo');
     * // { baz: 42 }
     */
    var Storage = /** @class */ (function () {
        function Storage(storage, options) {
            if (options === void 0) { options = {}; }
            var isSupported = storage ? isStorageSupported(storage) : false;
            this.options = __assign({ needParsed: isSupported, prefix: '' }, options);
            this.storage = isSupported ? storage : new MemoryStorage(this.options.memoryScope);
        }
        /**
         * 内部用于获取存储的键名称。
         *
         * 如果实例有设置 `prefix`，返回 `prefix + key`。
         *
         * @protected
         * @param key 原键名称
         * @returns 存储的键名称
         */
        Storage.prototype.getKey = function (key) {
            return this.options.prefix + key;
        };
        /**
         * 获取存储的数据。
         *
         * @param {string} key 键名称。
         * @returns 如果键值存在返回键值，否则返回 `null`。
         * @example
         * const local = new Storage(window.localStorage);
         * local.set('foo', { baz: 42 });
         * local.get('foo');
         * // { baz: 42 }
         */
        Storage.prototype.get = function (key) {
            var value = this.storage.getItem(this.getKey(key));
            return this.options.needParsed ? parse(value, this.options.reviver) : value;
        };
        /**
         * 存储数据。
         *
         * @param key 键名称。
         * @param value 键值。
         * @example
         * const local = new Storage(window.localStorage);
         * local.set('foo', { baz: 42 });
         * local.get('foo');
         * // { baz: 42 }
         */
        Storage.prototype.set = function (key, value) {
            this.storage.setItem(this.getKey(key), this.options.needParsed ? stringify(value, this.options.replacer) : value);
        };
        /**
         * 删除存储的数据。
         *
         * @param key 键名称。
         * @example
         * const local = new Storage(window.localStorage);
         * local.set('foo', { baz: 42 });
         * local.get('foo');
         * // { baz: 42 }
         *
         * local.del('foo');
         * local.get('foo');
         * // null
         */
        Storage.prototype.del = function (key) {
            this.storage.removeItem(this.getKey(key));
        };
        /**
         * 清除存储的所有键。
         *
         * 注意：该方法调用 `storage.clear()`，可能会将同域下的不同实例的所有键都清除。如果要避免这种情况，建议使用 `import { Cache } 'cache2'`。
         *
         * @example
         * const local = new Storage(window.localStorage);
         * local.set('foo', { baz: 42 });
         * local.get('foo');
         * // { baz: 42 }
         *
         * local.clear();
         * local.get('foo');
         * // null
         */
        Storage.prototype.clear = function () {
            if (typeof this.storage.clear === 'function') {
                this.storage.clear();
            }
        };
        return Storage;
    }());

    // 命名空间缓存键前缀。
    var defaultPrefix = 'cache2_';
    var defaultNamespace = 'default';
    /**
     * 功能丰富的数据存储管理，支持 `自定义缓存` `命名空间` `数据过期时间` `限制缓存数量` `自定义事件`。
     *
     * 注意：如果你需要的是简单的基本数据存储管理，例如浏览器存储，建议使用 `import { Storage } from 'cache2'`。
     *
     * @class
     * @param {string} [namespace] 命名空间。可选。
     * @param {Object} [options] 配置项。可选。
     * @param {Object} [options.storage] 自定义缓存对象要包含 `getItem` `setItem` `removeItem` 方法。默认使用内置的内存缓存。
     * @param {number} [options.max=-1] 最大缓存数据数量。`-1` 表示无限制。默认 `-1`。
     * @param {'limited' | 'replaced'} [options.maxStrategy='limited'] 当达到最大缓存数量限制时的缓存策略。`limited` 表示达到限制数量后不存入数据，保存时返回 `false`。`replaced` 表示优先替换快过期的数据，如果都是一样的过期时间(0)，按照先入先出规则处理，保存时始终返回 `true`。默认 `limited`。
     * @param {number} [options.stdTTL=0] 相对当前时间的数据存活时间，应用于当前实例的所有缓存数据。单位为毫秒，`0` 表示无期限。默认 `0`。
     * @param {number} [options.checkperiod=0] 定时检查过期数据，单位毫秒。如果小于等于 `0` 表示不启动定时器检查。默认 `0`。
     * @param {boolean} [options.needParsed] 存取数据时是否需要序列化和解析数据。如果使用内置的内存缓存，默认 `false`，如果自定义 `storage` 默认 `true`。
     * @param {Function} [options.replacer] 数据存储时序列化的参数，透传给 [JSON.stringify](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) 的 `replacer` 参数。仅在 `needParsed=true` 时生效。
     * @param {Function} [options.reviver] 数据获取时转换的参数，透传给 [JSON.parse](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) 的 `reviver` 参数。仅在 `needParsed=true` 时生效。
     * @param {string} [options.prefix] 缓存键前缀。
     * @example
     * // 自定义过期时间
     * const memoryCache = new Cache({ stdTTL: 60 * 1000 });
     * memoryCache.set('foo', { baz: 42 });
     * memoryCache.get('foo');
     * // { baz: 42 }
     *
     * // 60 seconds later
     *
     * memoryCache.get('foo');
     * // undefined
     *
     * // 命名空间、自定义缓存
     * const localCache = new Cache('namespace', { storage: window.localStorage });
     * localCache.set('foo', { baz: 42 });
     * localCache.get('foo');
     * // { baz: 42 }
     *
     * localCache.del('foo');
     * localCache.get('foo');
     * // undefined
     */
    var Cache = /** @class */ (function (_super) {
        __extends(Cache, _super);
        function Cache(namespace, options) {
            var _this = _super.call(this) || this;
            var ns = defaultNamespace, opts;
            if (typeof namespace === 'string') {
                ns = namespace || defaultNamespace;
            }
            else if (typeof namespace === 'object') {
                opts = namespace;
            }
            if (!opts && typeof options === 'object') {
                opts = options;
            }
            _this.options = __assign({ max: -1, stdTTL: 0, maxStrategy: 'limited', checkperiod: 0, prefix: defaultPrefix }, opts);
            _this.storage = new Storage(_this.options.storage, __assign({ memoryScope: ns }, _this.options));
            _this.cacheKey = ns;
            _this.startCheckperiod();
            return _this;
        }
        /**
         * 检查当前键值是否过期，如果过期将会自动删除。
         *
         * @param key 键名称。
         * @param data 缓存数据。
         * @returns 如果键值已过期返回 `false` ，否则返回 `true`。
         */
        Cache.prototype._check = function (key, data) {
            var ret = true;
            if (data.t !== 0 && data.t < Date.now()) {
                ret = false;
                this.del(key);
                this.emit('expired', key, data.v);
            }
            return ret;
        };
        Cache.prototype._wrap = function (value, ttl) {
            var now = Date.now();
            var currentTtl = typeof ttl === 'number' ? ttl : this.options.stdTTL;
            var livetime = currentTtl > 0 ? now + currentTtl : 0;
            return {
                v: value,
                t: livetime,
                n: now
            };
        };
        Cache.prototype._isLimited = function (len) {
            return this.options.max > -1 && len >= this.options.max;
        };
        Cache.prototype._getReplaceKey = function (keys, cacheValues) {
            var retkey = keys[0];
            keys.forEach(function (key) {
                if (cacheValues[key].t < cacheValues[retkey].t ||
                    (cacheValues[key].t === cacheValues[retkey].t && cacheValues[key].n < cacheValues[retkey].n)) {
                    retkey = key;
                }
            });
            return retkey;
        };
        Object.defineProperty(Cache.prototype, "cacheValues", {
            /**
             * 获取全部缓存数据，不处理过期数据和排序
             */
            get: function () {
                return this.storage.get(this.cacheKey) || {};
            },
            enumerable: false,
            configurable: true
        });
        // 设置缓存数据
        Cache.prototype.setCacheValues = function (values) {
            this.storage.set(this.cacheKey, values);
        };
        /**
         * 获取缓存值。
         *
         * @param {string} key 键名称。
         * @returns {*} 如果找到该值，则返回该值。如果未找到或已过期，则返回 `undefined`。
         * @example
         * myCache.set('myKey', obj, 5 * 60 * 1000);
         * myCache.get('myKey');
         * // { foo: 'bar', baz: 42 }
         *
         * myCache.get('myKey2');
         * // undefined
         */
        Cache.prototype.get = function (key) {
            var data = this.cacheValues[key];
            if (data && this._check(key, data)) {
                return data.v;
            }
            return;
        };
        /**
         * 获取多个缓存值。
         *
         * @param {string[]} keys 多个键名称。
         * @returns {Object} 如果找到对应键名的值，返回一个具有键值对的对象。如果未找到或已过期，则返回一个空对象 `{}`。
         * @example
         * myCache.mset([
         *   { key: 'myKey', value: { foo: 'bar', baz: 42 }, ttl: 5 * 60 * 1000 },
         *   { key: 'myKey2', value: { a: 1, b: 2 } },
         *   { key: 'myKey3', value: 'abc' }
         * ]);
         *
         * myCache.mget(['myKey', 'myKey2']);
         * // {
         * //   myKey: { foo: 'bar', baz: 42 },
         * //   myKey2: { a: 1, b: 2 }
         * // }
         */
        Cache.prototype.mget = function (keys) {
            var _this = this;
            var ret = {};
            if (!Array.isArray(keys)) {
                return ret;
            }
            var cacheValues = this.cacheValues;
            keys.forEach(function (key) {
                var data = cacheValues[key];
                if (data && _this._check(key, data)) {
                    ret[key] = data.v;
                }
            });
            return ret;
        };
        /**
         * 获取全部缓存值。
         *
         * @returns {Object} 返回一个具有键值对的对象。
         * @example
         * myCache.mset([
         *   { key: 'myKey', value: { foo: 'bar', baz: 42 }, ttl: 5 * 60 * 1000 },
         *   { key: 'myKey2', value: { a: 1, b: 2 } },
         *   { key: 'myKey3', value: 'abc' }
         * ]);
         *
         * myCache.getAll();
         * // {
         * //   myKey: { foo: 'bar', baz: 42 },
         * //   myKey2: { a: 1, b: 2 }
         * //   myKey3: 'abc'
         * // }
         */
        Cache.prototype.getAll = function () {
            var keys = Object.keys(this.cacheValues);
            return this.mget(keys);
        };
        /**
         * 设置缓存数据。
         *
         * 如果超出缓存数量，可能会设置失败。
         *
         * @param {string} key 键名称。
         * @param {*} value 键值。
         * @param {number} [ttl] 数据存活时间。单位毫秒 `ms`。
         * @returns {boolean} 如果设置成功返回 `true`，否则返回 `false`。
         * @example
         * myCache.set('myKey', { foo: 'bar', baz: 42 }, 5 * 60 * 1000);
         * // true
         */
        Cache.prototype.set = function (key, value, ttl) {
            if (this.options.max === 0) {
                return false;
            }
            var cacheValues = this.cacheValues;
            var keys = Object.keys(cacheValues);
            // 当前不存在该键值，并且数据量超过最大限制
            if (!cacheValues[key] && this._isLimited(keys.length)) {
                var validKeys = this.keys();
                if (this._isLimited(validKeys.length)) {
                    // 如果最大限制策略是替换，将优先替换快过期的数据，如果都是一样的过期时间(0)，按照先入先出规则处理。
                    if (this.options.maxStrategy === 'replaced') {
                        var replaceKey = this._getReplaceKey(validKeys, cacheValues);
                        this.del(replaceKey);
                    }
                    else {
                        // 如果是最大限制策略是不允许添加，返回 false 。
                        return false;
                    }
                }
            }
            cacheValues[key] = this._wrap(value, ttl);
            this.setCacheValues(cacheValues);
            this.emit('set', key, cacheValues[key].v);
            return true;
        };
        /**
         * 设置多个缓存数据。
         *
         * @param {Object[]} keyValueSet 多个键值对数据。
         * @returns {boolean} 如果全部设置成功返回 `true`，否则返回 `false`。
         * @example
         * myCache.mset([
         *   { key: 'myKey', value: { foo: 'bar', baz: 42 }, ttl: 5 * 60 * 1000 },
         *   { key: 'myKey2', value: { a: 1, b: 2 } },
         *   { key: 'myKey3', value: 'abc' }
         * ]);
         * // true
         */
        Cache.prototype.mset = function (keyValueSet) {
            var _this = this;
            // 该处不使用数组 some 方法，是因为不能某个失败，而导致其他就不在更新。
            var ret = true;
            keyValueSet.forEach(function (item) {
                var itemSetResult = _this.set(item.key, item.value, item.ttl);
                if (ret && !itemSetResult) {
                    ret = false;
                }
            });
            return ret;
        };
        /**
         * 删除一个或多个键。
         *
         * @param {string|string[]} key 要删除的键名。
         * @returns {number} 返回已删除的数量。
         * @example
         * myCache.set('myKey', { foo: 'bar', baz: 42 });
         * myCache.del('myKey'); // 1
         * myCache.del('not found'); // 0
         *
         * myCache.mset([
         *   { key: 'myKey', value: { foo: 'bar', baz: 42 }, ttl: 5 * 60 * 1000 },
         *   { key: 'myKey2', value: { a: 1, b: 2 } },
         *   { key: 'myKey3', value: 'abc' }
         * ]);
         * myCache.del(['myKey', 'myKey2']); // 2
         */
        Cache.prototype.del = function (key) {
            var _this = this;
            var cacheValues = this.cacheValues;
            var count = 0;
            var keys = Array.isArray(key) ? key : [key];
            keys.forEach(function (key) {
                if (cacheValues[key]) {
                    count++;
                    var oldData = cacheValues[key];
                    delete cacheValues[key];
                    _this.emit('del', key, oldData.v);
                }
            });
            if (count > 0) {
                this.setCacheValues(cacheValues);
            }
            return count;
        };
        /**
         * 清除全部缓存的数据。
         *
         * @example
         * myCache.set('bar', 1);
         * myCache.set('foo', 2);
         * myCache.keys(); // ['bar', 'foo']
         *
         * myCache.clear();
         * myCache.keys(); // []
         */
        Cache.prototype.clear = function () {
            this.storage.del(this.cacheKey);
        };
        /**
         * 获取全部键名的数组。
         *
         * @returns {string[]} 返回全部键名的数组。
         * @example
         * myCache.set('bar', 1);
         * myCache.set('foo', 2);
         *
         * myCache.keys(); // ['bar', 'foo']
         */
        Cache.prototype.keys = function () {
            var _this = this;
            var cacheValues = this.cacheValues;
            var keys = Object.keys(cacheValues);
            return keys.filter(function (key) { return _this._check(key, cacheValues[key]); });
        };
        /**
         * 判断是否存在某个键。
         *
         * @param {string} key 键名称。
         * @returns {boolean} 如果包含该键返回 `true`，否则返回 `false`。
         * @example
         * myCache.has('foo'); // false
         *
         * myCache.set('foo', 1);
         * myCache.has('foo'); // true
         */
        Cache.prototype.has = function (key) {
            var data = this.cacheValues[key];
            return !!(data && this._check(key, data));
        };
        /**
         * 获取缓存值并从缓存中删除键。
         *
         * @param {string} key 键名称。
         * @returns {*} 如果找到该值，则返回该值，并从缓存中删除该键。如果未找到或已过期，则返回 `undefined`。
         * @example
         * myCache.set('myKey', 'myValue');
         * myCache.has('myKey'); // true
         *
         * myCache.take('myKey'); // 'myValue'
         * myCache.has('myKey'); // false
         */
        Cache.prototype.take = function (key) {
            var ret;
            var data = this.cacheValues[key];
            if (data && this._check(key, data)) {
                ret = data.v;
                this.del(key);
            }
            return ret;
        };
        /**
         * 更新缓存键值的数据存活时间。
         *
         * @param {string} key 键名称。
         * @param {number} ttl 数据存活时间。
         * @returns {boolean} 如果找到并更新成功，则返回 `true`，否则返回 `false`。
         * @example
         * myCache.set('myKey', { foo: 'bar', baz: 42 }, 5 * 60 * 1000);
         * myCache.ttl('myKey', 60 * 1000);
         * // true
         *
         * myCache.ttl('not found', 1000);
         * // false
         */
        Cache.prototype.ttl = function (key, ttl) {
            var cacheValues = this.cacheValues;
            var data = cacheValues[key];
            if (data && this._check(key, data)) {
                cacheValues[key] = this._wrap(data.v, ttl);
                return true;
            }
            return false;
        };
        /**
         * 获取某个键的过期时间戳。
         *
         * @param {string} key 键名称。
         * @returns {number | undefined} 如果未找到键或已过期，返回 `undefined`。如果 `ttl` 为 `0`，返回 `0`，否则返回一个以毫秒为单位的时间戳，表示键值将过期的时间。
         * @example
         * const myCache = new Cache({ stdTTL: 5 * 1000 });
         *
         * // 假如 Date.now() = 1673330000000
         * myCache.set('ttlKey', 'expireData');
         * myCache.set('noTtlKey', 'nonExpireData', 0);
         *
         * myCache.getTtl('ttlKey'); // 1673330005000
         * myCache.getTtl('noTtlKey'); // 0
         * myCache.getTtl('unknownKey'); // undefined
         */
        Cache.prototype.getTtl = function (key) {
            var cacheValues = this.cacheValues;
            var data = cacheValues[key];
            if (data && this._check(key, data)) {
                return cacheValues[key].t;
            }
            return;
        };
        /**
         * 获取某个键值的最后修改时间。
         *
         * @param {string} key 键名称。
         * @returns {number | undefined} 如果未找到键或已过期，返回 `undefined`，否则返回一个以毫秒时间戳，表示键值最后修改时间。
         * @example
         * const myCache = new Cache();
         *
         * // 假如 Date.now() = 1673330000000
         * myCache.set('myKey', 'foo');
         * myCache.getLastModified('myKey'); // 1673330000000
         *
         * // 5000ms later
         * myCache.set('myKey', 'bar');
         * myCache.getLastModified('myKey'); // 1673330005000
         */
        Cache.prototype.getLastModified = function (key) {
            var cacheValues = this.cacheValues;
            var data = cacheValues[key];
            if (data && this._check(key, data)) {
                return cacheValues[key].n;
            }
            return;
        };
        /**
         * 启动定时校验过期数据。
         *
         * 注意，如果没有设置 `checkperiod` 将不会触发定时器。
         *
         * @example
         * // 设置 checkperiod 之后自动生效
         * const myCache = new Cache({
         *   checkperiod: 10 * 60 * 1000 // 10分钟检查一次数据是否过期
         * });
         *
         * // 停止定时校验过期数据
         * myCache.stopCheckperiod();
         *
         * // 启动定时校验过期数据
         * myCache.startCheckperiod();
         */
        Cache.prototype.startCheckperiod = function () {
            var _this = this;
            // 触发全部缓存数据是否过期校验
            this.keys();
            if (this.options.checkperiod > 0) {
                clearTimeout(this._checkTimeout);
                this._checkTimeout = setTimeout(function () {
                    _this.startCheckperiod();
                }, this.options.checkperiod);
            }
        };
        /**
         * 停止定时校验过期数据。
         *
         * @example
         * // 设置 checkperiod 之后自动生效
         * const myCache = new Cache({
         *   checkperiod: 10 * 60 * 1000 // 10分钟检查一次数据是否过期
         * });
         *
         * // 停止定时校验过期数据
         * myCache.stopCheckperiod();
         */
        Cache.prototype.stopCheckperiod = function () {
            clearTimeout(this._checkTimeout);
        };
        return Cache;
    }(EmitterPro));

    var AsyncMemo = (function () {
        function AsyncMemo(options) {
            this.promiseCache = {};
            this.cache = new Cache(uniqueId('uh_async_memo'), options);
        }
        AsyncMemo.prototype.run = function (asyncFn, key, options) {
            var _this = this;
            if (!key || !isString(key)) {
                return asyncFn();
            }
            var opts = __assign({ persisted: true }, options);
            if (opts.persisted) {
                var data = this.cache.get(key);
                if (data) {
                    return Promise.resolve(data);
                }
            }
            if (!this.promiseCache[key]) {
                this.promiseCache[key] = asyncFn()
                    .then(function (res) {
                    delete _this.promiseCache[key];
                    _this.cache.set(key, res, opts.ttl);
                    return res;
                })
                    .catch(function (err) {
                    delete _this.promiseCache[key];
                    return Promise.reject(err);
                });
            }
            return this.promiseCache[key];
        };
        return AsyncMemo;
    }());
    var AsyncMemo$1 = AsyncMemo;

    function isDocumentVisible() {
        if (typeof document !== 'undefined' && typeof document.visibilityState !== 'undefined') {
            return document.visibilityState !== 'hidden';
        }
        return true;
    }
    function isOnline() {
        if (typeof navigator !== 'undefined' && typeof navigator.onLine !== 'undefined') {
            return navigator.onLine;
        }
        return true;
    }

    function limit(fn, timespan) {
        var pending = false;
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (pending)
                return;
            pending = true;
            fn.apply(void 0, args);
            setTimeout(function () {
                pending = false;
            }, timespan);
        };
    }

    // from swr
    var listeners$1 = [];
    function subscribe$1(listener) {
        listeners$1.push(listener);
        return function unsubscribe() {
            var index = listeners$1.indexOf(listener);
            listeners$1.splice(index, 1);
        };
    }
    var eventsBinded$1 = false;
    if (typeof window !== 'undefined' && window.addEventListener && !eventsBinded$1) {
        var revalidate$1 = function () {
            if (!isDocumentVisible())
                return;
            for (var i = 0; i < listeners$1.length; i++) {
                var listener = listeners$1[i];
                listener();
            }
        };
        window.addEventListener('visibilitychange', revalidate$1, false);
        // only bind the events once
        eventsBinded$1 = true;
    }

    // from swr
    var listeners = [];
    function subscribe(listener) {
        listeners.push(listener);
        return function unsubscribe() {
            var index = listeners.indexOf(listener);
            listeners.splice(index, 1);
        };
    }
    var eventsBinded = false;
    if (typeof window !== 'undefined' && window.addEventListener && !eventsBinded) {
        var revalidate = function () {
            if (!isDocumentVisible() || !isOnline())
                return;
            for (var i = 0; i < listeners.length; i++) {
                var listener = listeners[i];
                listener();
            }
        };
        window.addEventListener('visibilitychange', revalidate, false);
        window.addEventListener('focus', revalidate, false);
        // only bind the events once
        eventsBinded = true;
    }

    var asyncMemo = new AsyncMemo$1({ prefix: 'rc-hooks', stdTTL: 5 * 60 * 1000 });
    /**
     * 获取缓存键值。
     *
     * @param key 键名称。
     * @returns 如果找到缓存键值，返回该键值，否则返回 `undefined`。
     */
    function getCache(key) {
        return asyncMemo.cache.get(key);
    }
    /**
     * 清理缓存。如果不传参数，表示清理全部。
     *
     * @param key 键名称。
     */
    function clearCache(key) {
        if (key) {
            asyncMemo.cache.del(key);
        }
        else {
            asyncMemo.cache.clear();
        }
    }
    var Async = /** @class */ (function () {
        function Async(async, options) {
            // 内部缓存参数
            this.params = [];
            // 标识页面获取焦点时是否触发轮询
            this.pollingWhenVisibleFlag = false;
            // 轮询定时器
            this.pollingTimer = null;
            // 内部标记当前执行计数，防止同一个实例执行多次run 或 不执行取消后的run
            this.counter = 1;
            // 标识是否销毁
            this.destroyed = false;
            this.async = async;
            this.options = __assign({ cacheTime: 5 * 60 * 1000, persisted: false, pollingWhenHidden: true, refreshOnWindowFocus: false, focusTimespan: 5000 }, options);
            // 取消订阅列表
            this.unsubscribes = [];
            this.init();
        }
        // 初始化
        Async.prototype.init = function () {
            var _a = this.options, pollingInterval = _a.pollingInterval, refreshOnWindowFocus = _a.refreshOnWindowFocus, focusTimespan = _a.focusTimespan;
            // 延迟执行
            this.updateDebounce();
            // 订阅页面显示时触发轮询
            if (pollingInterval) {
                this.unsubscribes.push(subscribe$1(this.rePolling.bind(this)));
            }
            // 订阅屏幕聚焦时请求
            if (refreshOnWindowFocus) {
                var limitRefresh = limit(this.refresh.bind(this), focusTimespan);
                this.unsubscribes.push(subscribe(limitRefresh));
            }
        };
        // 更新延迟执行
        Async.prototype.updateDebounce = function () {
            var _a = this.options, debounceInterval = _a.debounceInterval, throttleInterval = _a.throttleInterval;
            this.debounce =
                typeof debounceInterval === 'number' && debounceInterval > 0
                    ? debounce(this._run, debounceInterval)
                    : undefined;
            this.throttle =
                typeof throttleInterval === 'number' && throttleInterval > 0
                    ? throttle(this._run, throttleInterval)
                    : undefined;
        };
        // 轮询
        Async.prototype.rePolling = function () {
            if (this.pollingWhenVisibleFlag) {
                this.pollingWhenVisibleFlag = false;
                this.refresh();
            }
        };
        Async.prototype.afterUpdateOptions = function (prevOptions, nextOptions) {
            if (nextOptions === void 0) { nextOptions = {}; }
            // 可能取消延迟
            if (('debounceInterval' in nextOptions &&
                nextOptions.debounceInterval !== prevOptions.debounceInterval) ||
                ('throttleInterval' in nextOptions &&
                    nextOptions.throttleInterval !== prevOptions.throttleInterval)) {
                this.updateDebounce();
            }
        };
        // 更新配置
        Async.prototype.updateOptions = function (options) {
            var prevOptions = this.options;
            var nextOptions = __assign(__assign({}, this.options), options);
            this.options = nextOptions;
            this.afterUpdateOptions(prevOptions, nextOptions);
        };
        // 发起请求
        // 不返回Promise，只支持 onSuccess 或 onError 回调处理，避免多个实例同时调用 run 导致部分 Promise 没有触发问题
        Async.prototype._run = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (this.pollingTimer) {
                clearTimeout(this.pollingTimer);
            }
            // 防止执行取消的异步结果
            // 触发多次run，只有执行最后一次异步结果
            var count = this.counter;
            this.params = args;
            var _a = this.options, cacheKey = _a.cacheKey, cacheTime = _a.cacheTime, persisted = _a.persisted, formatResult = _a.formatResult, onSuccess = _a.onSuccess, onError = _a.onError, onFinally = _a.onFinally, onBefore = _a.onBefore, pollingWhenHidden = _a.pollingWhenHidden, pollingInterval = _a.pollingInterval;
            onBefore === null || onBefore === void 0 ? void 0 : onBefore(args);
            return new Promise(function (resolve, reject) {
                asyncMemo
                    .run(function () {
                    return _this.async.apply(_this, args).then(function (res) {
                        return typeof formatResult === 'function' ? formatResult(res, args) : res;
                    });
                }, cacheKey, { persisted: persisted, ttl: cacheTime })
                    .then(function (fmtRes) {
                    if (count === _this.counter) {
                        onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(fmtRes, args);
                        resolve(fmtRes);
                    }
                })
                    .catch(function (err) {
                    if (count === _this.counter) {
                        onError === null || onError === void 0 ? void 0 : onError(err, args);
                        reject(err);
                    }
                })
                    .finally(function () {
                    if (count === _this.counter) {
                        onFinally === null || onFinally === void 0 ? void 0 : onFinally();
                        if (pollingInterval) {
                            if (!isDocumentVisible() && !pollingWhenHidden) {
                                _this.pollingWhenVisibleFlag = true;
                                return;
                            }
                            _this.pollingTimer = setTimeout(function () {
                                _this.run.apply(_this, args);
                            }, pollingInterval);
                        }
                    }
                });
            });
        };
        // 执行异步
        Async.prototype.run = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (this.debounce) {
                this.debounce.apply(this, args);
                return Promise.resolve(null);
            }
            if (this.throttle) {
                this.throttle.apply(this, args);
                return Promise.resolve(null);
            }
            this.counter += 1;
            return this._run.apply(this, args);
        };
        // 使用之前参数，重新执行异步
        Async.prototype.refresh = function () {
            return this.run.apply(this, this.params);
        };
        // 取消请求
        Async.prototype.cancel = function () {
            if (this.debounce) {
                this.debounce.cancel();
            }
            if (this.throttle) {
                this.throttle.cancel();
            }
            // 取消轮询定时器
            if (this.pollingTimer) {
                clearTimeout(this.pollingTimer);
                this.pollingTimer = null;
            }
            this.counter += 1;
        };
        // 销毁
        Async.prototype.destroy = function (needCancel) {
            if (needCancel === void 0) { needCancel = true; }
            if (needCancel) {
                this.cancel();
            }
            if (!this.destroyed) {
                this.destroyed = true;
                this.unsubscribes.forEach(function (s) { return s(); });
                this.unsubscribes = [];
            }
        };
        // 恢复
        Async.prototype.resume = function () {
            if (this.destroyed) {
                this.destroyed = false;
                this.init();
            }
        };
        return Async;
    }());

    /**
     * 管理异步函数。
     *
     * @param {Function} asyncFn 异步函数。
     * @param {Object} [options] 配置项。
     * @param {boolean} [options.autoRun=true] 在初始化时自动执行异步函数。如果设置为 `false`，则需要手动调用 `run` 触发执行。默认 `true`。
     * @param {*} [options.initialData] 初始化的 `data`。
     * @param {boolean} [options.defaultLoading=false] 初始化默认 `loading` 值。默认 `false`。
     * @param {Array} [options.defaultParams] 如果 `autoRun=true` 自动执行 `run` 的默认参数。
     * @param {Array} [options.refreshDeps] 在 `autoRun = true` 时，`refreshDeps` 变化，会触发重新执行。
     * @param {Function} [options.onBefore] 异步函数执行前触发，参数为 `params`。
     * @param {Function} [options.onSuccess] 异步函数 `resolve` 时触发，参数为 `data` 和 `params`。
     * @param {Function} [options.onError] 异步函数报错时触发，参数为 `error` 和 `params`。
     * @param {string} [options.cacheKey] 缓存的键值。启用缓存机制，异步成功结果将被缓存。如果多个相同 cacheKey 的异步同时触发中，将共享第一个异步结果。
     * @param {number} [options.cacheTime=5*60*1000] 缓存时间。单位毫秒。
     * @param {boolean} [options.persisted=false] 持久化数据。当有缓存数据时，不再执行异步函数。需要配合 `cacheKey` `cacheTime` 使用。默认 `false`。
     * @param {number} [options.loadingDelay] 设置 `loading` 延迟时间，避免闪烁，单位为毫秒。
     * @param {number} [options.pollingInterval] 轮询间隔，单位为毫秒。设置后，将进入轮询模式，定时触发 `run`。
     * @param {boolean} [options.pollingWhenHidden=true] 在页面隐藏时，是否继续轮询。如果为 `true`，不会停止轮询。如果为 `false`，在页面隐藏时会暂时停止轮询，页面重新显示时继续上次轮询。默认 `true`。
     * @param {boolean} [options.refreshOnWindowFocus=false] 在屏幕重新获取焦点或重新显示时，是否重新发起请求。如果为 `false`，不会重新发起请求。如果为 `true`，在屏幕重新聚焦或重新显示时，会重新发起请求。默认 `false`。
     * @param {number} [options.focusTimespan=5000] 屏幕重新聚焦，重新发起请求时间间隔。需要配置 `refreshOnWindowFocus` 使用。默认 `5000`。
     * @param {number} [options.debounceInterval] 防抖间隔，单位为毫秒，设置后，请求进入防抖模式。
     * @param {number} [options.throttleInterval] 节流间隔，单位为毫秒，设置后，请求进入节流模式。
     * @returns {Object}
     * @example
     * const { data, error, loading, run, cancel, refresh, mutate } = useAsync(asyncFn, options);
     */
    var useAsync = function (asyncFn, options) {
        var _a = options || {}, _b = _a.autoRun, autoRun = _b === void 0 ? true : _b, _c = _a.refreshDeps, refreshDeps = _c === void 0 ? [] : _c, defaultParams = _a.defaultParams, loadingDelay = _a.loadingDelay, __INTERNAL_FORMAT__ = _a.__INTERNAL_FORMAT__, _d = _a.defaultLoading, defaultLoading = _d === void 0 ? false : _d, initialData = _a.initialData, _e = _a.cacheKey, cacheKey = _e === void 0 ? '' : _e, _f = _a.cacheTime, cacheTime = _f === void 0 ? 5 * 60 * 1000 : _f, _g = _a.persisted, persisted = _g === void 0 ? false : _g, _h = _a.onSuccess, onSuccess = _h === void 0 ? noop : _h, _j = _a.onError, onError = _j === void 0 ? noop : _j, _k = _a.onFinally, onFinally = _k === void 0 ? noop : _k, _l = _a.onBefore, onBefore = _l === void 0 ? noop : _l, _m = _a.pollingInterval, pollingInterval = _m === void 0 ? 0 : _m, _o = _a.pollingWhenHidden, pollingWhenHidden = _o === void 0 ? true : _o, _p = _a.refreshOnWindowFocus, refreshOnWindowFocus = _p === void 0 ? false : _p, _q = _a.focusTimespan, focusTimespan = _q === void 0 ? 5000 : _q, debounceInterval = _a.debounceInterval, throttleInterval = _a.throttleInterval;
        var _r = __read(react.useState({
            // 参数兼容非array的情况
            params: [],
            loading: defaultLoading,
            error: null,
            data: cacheKey ? getCache(cacheKey) : initialData
        }), 2), state = _r[0], set = _r[1];
        var loadingDelayTimerRef = react.useRef(null); // 延迟loading
        // 持久化一些函数
        var asyncFnPersist = usePersistFn(asyncFn);
        var onSuccessPersist = usePersistFn(onSuccess);
        var onErrorPersist = usePersistFn(onError);
        var onFinallyPersist = usePersistFn(onFinally);
        var onBeforePersist = usePersistFn(onBefore);
        var internalFormatRef = useLatest(__INTERNAL_FORMAT__);
        // 异步执行前
        var handleBefore = react.useCallback(function (p) {
            onBeforePersist(p);
            // 取消延迟loading
            if (loadingDelayTimerRef.current) {
                clearTimeout(loadingDelayTimerRef.current);
            }
            // 缓存数据
            var cacheData = cacheKey ? getCache(cacheKey) : undefined;
            // 没有缓存数据 或 没有开启持久缓存，设置loading
            if (!cacheData || !persisted) {
                set(function (s) { return (__assign(__assign({}, s), { loading: !loadingDelay, params: p })); });
                // 设置延迟loading定时器
                if (loadingDelay) {
                    loadingDelayTimerRef.current = setTimeout(function () {
                        set(function (s) { return (__assign(__assign({}, s), { loading: true })); });
                    }, loadingDelay);
                }
            }
        }, [cacheKey, loadingDelay, onBeforePersist, persisted]);
        // 异步执行成功后
        var handleSuccess = react.useCallback(function (res, args) {
            if (loadingDelayTimerRef.current) {
                clearTimeout(loadingDelayTimerRef.current);
            }
            set(function (s) { return (__assign(__assign({}, s), { data: res, error: null, loading: false })); });
            onSuccessPersist(res, args);
        }, [onSuccessPersist]);
        // 异步执行失败后
        var handleError = react.useCallback(function (err, args) {
            if (loadingDelayTimerRef.current) {
                clearTimeout(loadingDelayTimerRef.current);
            }
            set(function (s) { return (__assign(__assign({}, s), { error: err, loading: false })); });
            onErrorPersist(err, args);
        }, [onErrorPersist]);
        // @ts-ignore
        var asyncInstanceRef = react.useRef();
        if (!asyncInstanceRef.current) {
            asyncInstanceRef.current = new Async(asyncFnPersist, {
                cacheKey: cacheKey,
                cacheTime: cacheTime,
                persisted: persisted,
                formatResult: internalFormatRef.current,
                onSuccess: handleSuccess,
                onError: handleError,
                onFinally: onFinallyPersist,
                onBefore: handleBefore,
                debounceInterval: debounceInterval,
                throttleInterval: throttleInterval,
                pollingInterval: pollingInterval,
                pollingWhenHidden: pollingWhenHidden,
                refreshOnWindowFocus: refreshOnWindowFocus,
                focusTimespan: focusTimespan
            });
        }
        useUpdateEffect(function () {
            asyncInstanceRef.current.updateOptions({
                cacheKey: cacheKey,
                cacheTime: cacheTime,
                persisted: persisted,
                formatResult: internalFormatRef.current,
                onSuccess: handleSuccess,
                onError: handleError,
                onFinally: onFinallyPersist,
                onBefore: handleBefore,
                debounceInterval: debounceInterval,
                throttleInterval: throttleInterval,
                pollingInterval: pollingInterval,
                pollingWhenHidden: pollingWhenHidden,
                refreshOnWindowFocus: refreshOnWindowFocus,
                focusTimespan: focusTimespan
            });
        }, [
            onSuccessPersist,
            onErrorPersist,
            cacheKey,
            cacheTime,
            persisted,
            debounceInterval,
            throttleInterval,
            onFinallyPersist,
            onBeforePersist,
            pollingInterval,
            pollingWhenHidden,
            refreshOnWindowFocus,
            focusTimespan,
            handleSuccess,
            handleError,
            handleBefore
        ]);
        // 执行异步
        var run = react.useCallback(function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return asyncInstanceRef.current.run.apply(asyncInstanceRef.current, args);
        }, []);
        // 使用上一次执行异步的参数，重新执行
        var refresh = react.useCallback(function () {
            return asyncInstanceRef.current.refresh();
        }, []);
        var cancel = react.useCallback(function () {
            asyncInstanceRef.current.cancel();
            // 取消延迟loading
            if (loadingDelayTimerRef.current) {
                clearTimeout(loadingDelayTimerRef.current);
            }
            set(function (s) { return (__assign(__assign({}, s), { loading: false })); });
        }, []);
        // 突变
        var mutate = function (newData) {
            if (typeof newData === 'function') {
                // @ts-ignore
                set(function (s) { return (__assign(__assign({}, s), { data: newData(state.data) })); });
            }
            else {
                set(function (s) { return (__assign(__assign({}, s), { data: newData })); });
            }
        };
        // autoRun=true 时，refreshDeps 变化，将重新执行
        useUpdateEffect(function () {
            // 区分 React.StrictMode 下触发
            if (autoRun && isArray(refreshDeps) && refreshDeps.length > 0) {
                refresh();
            }
        }, [autoRun].concat(refreshDeps));
        react.useEffect(function () {
            // 默认自动执行
            if (autoRun) {
                // 支持默认参数
                var fmtDefaultParams = isArray(defaultParams)
                    ? defaultParams
                    : (typeof defaultParams !== 'undefined' ? [defaultParams] : []);
                run.apply(void 0, fmtDefaultParams);
            }
            // 如果销毁过，可以重新恢复异步实例
            asyncInstanceRef.current.resume();
            return function () {
                cancel();
                asyncInstanceRef.current.destroy(false);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
        return __assign(__assign({}, state), { run: run, cancel: cancel, mutate: mutate, refresh: refresh });
    };

    /**
     * 获取垂直滚动的像素数
     *
     * @param el 滚动容器，默认 window
     * @returns
     */
    var getScrollTop = function (el) {
        if (el === void 0) { el = window; }
        if (!isBrowser || !el) {
            return 0;
        }
        if (isWindow(el)) {
            return window.scrollY;
        }
        return el.scrollTop;
    };
    /**
     * 获取元素内容高度，包括由于溢出导致的视图中不可见内容
     *
     * @param el 滚动容器，默认 window
     * @returns
     */
    var getScrollHeight = function (el) {
        if (el === void 0) { el = window; }
        if (!isBrowser || !el) {
            return 0;
        }
        if (isWindow(el)) {
            return document.documentElement.scrollHeight;
        }
        return el.scrollHeight;
    };
    /**
     * 获取元素内部的高度，包含内边距，但不包括水平滚动条、边框和外边距
     *
     * @param el 滚动容器，默认 window
     * @returns
     */
    var getClientHeight = function (el) {
        if (el === void 0) { el = window; }
        if (!isBrowser || !el) {
            return 0;
        }
        if (isWindow(el)) {
            return document.documentElement.clientHeight;
        }
        return el.clientHeight;
    };

    function getTarget(target) {
        if (typeof target === 'function') {
            // @ts-ignore
            return target();
        }
        return target;
    }
    var useScrollToLower = function (_a) {
        var _b = _a === void 0 ? {} : _a, outTarget = _b.target, _c = _b.threshold, threshold = _c === void 0 ? 100 : _c, _d = _b.onScrollLower, onScrollLower = _d === void 0 ? function () { } : _d;
        var onScrollLowerPersist = usePersistFn(onScrollLower);
        var scrollMethod = react.useCallback(function () {
            if (!outTarget) {
                return;
            }
            var target = getTarget(outTarget);
            if (!target) {
                return;
            }
            if (getScrollHeight(target) - getScrollTop(target) <= getClientHeight(target) + threshold) {
                onScrollLowerPersist();
            }
        }, [onScrollLowerPersist, outTarget, threshold]);
        react.useEffect(function () {
            if (outTarget) {
                var target_1 = getTarget(outTarget);
                if (target_1) {
                    target_1.addEventListener('scroll', scrollMethod);
                    return function () {
                        target_1.removeEventListener('scroll', scrollMethod);
                    };
                }
            }
        }, [outTarget, scrollMethod]);
    };

    /**
     * 基于 `useAsync` 扩展，用于管理加载更多的 Hook。
     *
     * @param {number} [options.threshold=100] 上拉自动加载，距离底部距离阈值。默认 `100`。
     * @param {Object | Function} [options.target] 内容的滚动容器，如果存在，则在滚动到底部时，自动触发 `loadMore` 方法。
     * @param {Function} [options.isNoMore=()=>false] 判断是否没有更多数据。默认 `()=>false`。
     * @param {boolean} [options.autoRun=true] 在初始化时自动执行异步函数。如果设置为 `false`，则需要手动调用 `run` 触发执行。默认 `true`。
     * @param {*} [options.initialData] 初始化的 `data`。
     * @param {boolean} [options.defaultLoading=false] 初始化默认 `loading` 值。默认 `false`。
     * @param {Array} [options.defaultParams] 如果 `autoRun=true` 自动执行 `run` 的默认参数。
     * @param {Array} [options.refreshDeps] 在 `autoRun = true` 时，refreshDeps 变化，会执行 `refresh` （重置`current`到第 1 页，并清除之前列表数据，发起请求。）。
     * @param {Function} [options.onBefore] 异步函数执行前触发，参数为 `params`。
     * @param {Function} [options.onSuccess] 异步函数 `resolve` 时触发，参数为 `data` 和 `params`。
     * @param {Function} [options.onError] 异步函数报错时触发，参数为 `error` 和 `params`。
     * @param {number} [options.loadingDelay] 设置 `loading` 延迟时间，避免闪烁，单位为毫秒。
     * @param {boolean} [options.refreshOnWindowFocus=false] 在屏幕重新获取焦点或重新显示时，是否重新发起请求。如果为 `false`，不会重新发起请求。如果为 `true`，在屏幕重新聚焦或重新显示时，会重新发起请求。默认 `false`。
     * @param {number} [options.focusTimespan=5000] 屏幕重新聚焦，重新发起请求时间间隔。需要配置 `refreshOnWindowFocus` 使用。默认 `5000`。
     * @param {number} [options.debounceInterval] 防抖间隔，单位为毫秒，设置后，请求进入防抖模式。
     * @param {number} [options.throttleInterval] 节流间隔，单位为毫秒，设置后，请求进入节流模式。
     * @returns {Object}
     * @example
     * const { data, error, loading, loadingMore, noMore, loadMore, refresh, cancel } = useLoadMore(asyncFn, options);
     */
    function useLoadMore(asyncFn, options) {
        var _a = (options || {}), _b = _a.threshold, threshold = _b === void 0 ? 100 : _b, target = _a.target, _c = _a.isNoMore, isNoMore = _c === void 0 ? function () { return false; } : _c, _d = _a.refreshDeps, refreshDeps = _d === void 0 ? [] : _d, _e = _a.autoRun, autoRun = _e === void 0 ? true : _e, restOptions = __rest(_a, ["threshold", "target", "isNoMore", "refreshDeps", "autoRun"]);
        var dataGroup = react.useRef([]); // 缓存之前请求的列表数据
        var currentPageRef = react.useRef(1); // 当前页码
        var _f = useAsync(asyncFn, __assign(__assign({ defaultParams: [
                {
                    current: currentPageRef.current
                }
            ], autoRun: autoRun }, restOptions), { onError: function (err, _params) {
                var _a;
                // 加载失败并且当前页码大于第一页，页码自减一
                if (currentPageRef.current > 1) {
                    currentPageRef.current -= 1;
                }
                (_a = restOptions === null || restOptions === void 0 ? void 0 : restOptions.onError) === null || _a === void 0 ? void 0 : _a.call(restOptions, err, _params);
            }, __INTERNAL_FORMAT__: function (res) {
                dataGroup.current =
                    currentPageRef.current === 1 ? res.list : dataGroup.current.concat(res.list);
                return __assign(__assign({}, res), { list: dataGroup.current });
            } })), run = _f.run, data = _f.data, loading = _f.loading, reqCancel = _f.cancel, params = _f.params, reqMutate = _f.mutate, restAsyncReturn = __rest(_f, ["run", "data", "loading", "cancel", "params", "mutate"]);
        var noMore = isNoMore ? !loading && isNoMore(data) : false;
        var _g = __read(params || []), firstParams = _g[0], restParams = _g.slice(1);
        var loadData = react.useCallback(function () {
            return run.apply(void 0, [{ current: currentPageRef.current }].concat(restParams));
        }, [restParams, run]);
        var cancel = react.useCallback(function () {
            // 加载中并且当前页码大于第一页，页码自减一
            if (loading && currentPageRef.current > 1) {
                currentPageRef.current -= 1;
            }
            reqCancel();
        }, [reqCancel, loading]);
        /**
         * 触发加载更多。
         */
        var loadMore = react.useCallback(function () {
            if (loading || noMore) {
                return;
            }
            currentPageRef.current += 1;
            loadData();
        }, [loading, noMore, loadData]);
        var mutate = react.useCallback(function (param) {
            var res = typeof param === 'function' ? param(data) : param;
            dataGroup.current = (res === null || res === void 0 ? void 0 : res.list) || [];
            reqMutate(res);
        }, [data, reqMutate]);
        var refresh = react.useCallback(function () {
            cancel();
            currentPageRef.current = 1;
            mutate(function (d) { return (__assign(__assign({}, d), { list: [] })); });
            return loadData();
        }, [cancel, loadData, mutate]);
        var scrollMethod = react.useCallback(function () {
            if (loading || !target) {
                return;
            }
            return loadMore();
        }, [loadMore, target, loading]);
        useScrollToLower({
            target: target,
            threshold: threshold,
            onScrollLower: scrollMethod
        });
        useUpdateEffect(function () {
            if (autoRun && isArray(refreshDeps) && refreshDeps.length > 0) {
                refresh();
            }
        }, refreshDeps);
        return __assign(__assign({}, restAsyncReturn), { loading: loading, data: data, run: run, 
            /**
             * 重置`current`到第 `1` 页，并清除之前列表数据，发起请求。
             */
            refresh: refresh, cancel: cancel, mutate: mutate, params: [__assign(__assign({}, firstParams), { current: currentPageRef.current })].concat(restParams), 
            /**
             * 触发加载更多。
             */
            loadMore: loadMore, 
            /**
             * 是否正在加载更多。即加载中并且 `current` 不等于 `1`。
             */
            loadingMore: loading && currentPageRef.current > 1, 
            /**
             * 是否没有更多。
             */
            noMore: noMore });
    }

    /**
     * 基于 `useAsync` 扩展，用于管理分页的 Hook。
     *
     * @param {Function} asyncFn 异步函数。
     * @param {Object} [options] 配置项。
     * @param {number} [options.defaultPageSize=10] 默认每页的数量。
     * @param {boolean} [options.autoRun=true] 在初始化时自动执行异步函数。如果设置为 `false`，则需要手动调用 `run` 触发执行。默认 `true`。
     * @param {*} [options.initialData] 初始化的 `data`。
     * @param {boolean} [options.defaultLoading=false] 初始化默认 `loading` 值。默认 `false`。
     * @param {Array} [options.defaultParams] 如果 `autoRun=true` 自动执行 `run` 的默认参数。
     * @param {Array} [options.refreshDeps] 在 `autoRun = true` 时，refreshDeps 变化，会重置 `current` 到第一页，并执行 `run` 方法。
     * @param {Function} [options.onBefore] 异步函数执行前触发，参数为 `params`。
     * @param {Function} [options.onSuccess] 异步函数 `resolve` 时触发，参数为 `data` 和 `params`。
     * @param {Function} [options.onError] 异步函数报错时触发，参数为 `error` 和 `params`。
     * @param {string} [options.cacheKey] 缓存的键值。启用缓存机制，异步成功结果将被缓存。如果多个相同 cacheKey 的异步同时触发中，将共享第一个异步结果。
     * @param {number} [options.cacheTime=5*60*1000] 缓存时间。单位毫秒。
     * @param {boolean} [options.persisted=false] 持久化数据。当有缓存数据时，不再执行异步函数。需要配合 `cacheKey` `cacheTime` 使用。默认 `false`。
     * @param {number} [options.loadingDelay] 设置 `loading` 延迟时间，避免闪烁，单位为毫秒。
     * @param {number} [options.pollingInterval] 轮询间隔，单位为毫秒。设置后，将进入轮询模式，定时触发 `run`。
     * @param {boolean} [options.pollingWhenHidden=true] 在页面隐藏时，是否继续轮询。如果为 `true`，不会停止轮询。如果为 `false`，在页面隐藏时会暂时停止轮询，页面重新显示时继续上次轮询。默认 `true`。
     * @param {boolean} [options.refreshOnWindowFocus=false] 在屏幕重新获取焦点或重新显示时，是否重新发起请求。如果为 `false`，不会重新发起请求。如果为 `true`，在屏幕重新聚焦或重新显示时，会重新发起请求。默认 `false`。
     * @param {number} [options.focusTimespan=5000] 屏幕重新聚焦，重新发起请求时间间隔。需要配置 `refreshOnWindowFocus` 使用。默认 `5000`。
     * @param {number} [options.debounceInterval] 防抖间隔，单位为毫秒，设置后，请求进入防抖模式。
     * @param {number} [options.throttleInterval] 节流间隔，单位为毫秒，设置后，请求进入节流模式。
     * @returns {Object}
     * @example
     * const { data, error, loading, run, params, refresh, pagination, tableProps } = usePagination(asyncFn, options);
     */
    function usePagination(asyncFn, options) {
        var _a = options || {}, _b = _a.defaultPageSize, defaultPageSize = _b === void 0 ? 10 : _b, _c = _a.refreshDeps, refreshDeps = _c === void 0 ? [] : _c, defaultParamsProp = _a.defaultParams, _d = _a.autoRun, autoRun = _d === void 0 ? true : _d, restOptions = __rest(_a, ["defaultPageSize", "refreshDeps", "defaultParams", "autoRun"]);
        var defaultParams = react.useMemo(function () { return defaultParamsProp || [{ current: 1, pageSize: defaultPageSize }]; }, [defaultPageSize, defaultParamsProp]);
        var _e = useAsync(asyncFn, __assign({ defaultParams: defaultParams, autoRun: autoRun }, restOptions)), run = _e.run, data = _e.data, params = _e.params, loading = _e.loading, restAsyncReturn = __rest(_e, ["run", "data", "params", "loading"]);
        var _f = params && params[0] ? params[0] : defaultParams[0], current = _f.current, pageSize = _f.pageSize;
        var total = (data === null || data === void 0 ? void 0 : data.total) || 0;
        var changePagination = react.useCallback(function (pagination) {
            var _a = __read(params), oldParams = _a[0], restParams = _a.slice(1);
            run.apply(void 0, [__assign(__assign({}, oldParams), pagination)].concat(restParams));
        }, [params, run]);
        var refresh = react.useCallback(function () {
            changePagination({ current: current, pageSize: pageSize });
        }, [changePagination, current, pageSize]);
        var onChange = react.useCallback(function (c, p) {
            var toCurrent = c <= 0 ? 1 : c;
            var toPageSize = p <= 0 ? 1 : p;
            var tempTotalPage = Math.ceil(total / toPageSize);
            if (toCurrent > tempTotalPage && tempTotalPage > 0) {
                toCurrent = tempTotalPage;
            }
            changePagination({
                current: toCurrent,
                pageSize: toPageSize
            });
        }, [changePagination, total]);
        var changeCurrent = react.useCallback(function (c) {
            onChange(c, pageSize);
        }, [onChange, pageSize]);
        var changePageSize = react.useCallback(function (p) {
            onChange(current, p);
        }, [current, onChange]);
        var changeTable = react.useCallback(function (pagination, filters, sorter, extra) {
            changePagination({
                current: pagination === null || pagination === void 0 ? void 0 : pagination.current,
                pageSize: pagination === null || pagination === void 0 ? void 0 : pagination.pageSize,
                filters: filters,
                sorter: sorter,
                extra: extra
            });
        }, [changePagination]);
        useUpdateEffect(function () {
            if (autoRun && isArray(refreshDeps) && refreshDeps.length > 0) {
                changeCurrent(1);
            }
        }, refreshDeps);
        return __assign(__assign({}, restAsyncReturn), { data: data, run: run, refresh: refresh, loading: loading, params: params, 
            /**
             * 分页数据及操作分页的方法。
             */
            pagination: {
                current: current,
                pageSize: pageSize,
                total: total,
                onChange: onChange,
                changeCurrent: changeCurrent,
                changePageSize: changePageSize
            }, 
            /**
             * 适配 antd Table 组件的数据结构，可以直接用在 antd Table 组件上。
             */
            tableProps: {
                dataSource: ((data === null || data === void 0 ? void 0 : data.list) || []),
                loading: loading,
                onChange: changeTable,
                pagination: {
                    total: total,
                    current: current,
                    pageSize: pageSize
                }
            } });
    }

    /**
     * 只在组件 `unmount` 时执行的 Hook。
     *
     * @param fn 组件 `unmount` 时执行的函数。
     * @example
     * useUnmount(() => {
     *   console.log('unmount');
     * });
     */
    var useUnmount = function (fn) {
        var fnRef = useLatest(fn);
        // eslint-disable-next-line react-hooks/exhaustive-deps
        react.useEffect(function () { return function () { return fnRef.current(); }; }, []);
    };

    /**
     * 用来处理防抖函数的 Hook。
     *
     * @param {Function} fn 需要防抖的函数。
     * @param {number} [wait=0] 防抖等待时间，单位为毫秒。默认 `0`。
     * @param {boolean} [immediate=false] 是否在延迟开始前调用。默认 `false`。
     * @returns
     * @example
     * const [value, setValue] = useState(0);
     * // 频繁调用 run，但只会在所有调用完成 500ms 后执行一次函数
     * const { run } = useDebounceFn(setValue, 500);
     */
    function useDebounceFn(fn, wait, immediate) {
        if (wait === void 0) { wait = 0; }
        if (immediate === void 0) { immediate = false; }
        var fnRef = useLatest(fn);
        var debounceRun = react.useRef(debounce(function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return fnRef.current.apply(void 0, args);
        }, wait, immediate));
        useUnmount(function () {
            debounceRun.current.cancel();
        });
        return {
            run: debounceRun.current,
            cancel: debounceRun.current.cancel,
            flush: debounceRun.current.flush
        };
    }

    /**
     * 用来处理防抖值的 Hook。
     *
     * @param {*} value 需要防抖的值。
     * @param {number} [wait=0] 防抖等待时间，单位为毫秒。默认 `0`。
     * @param {boolean} [immediate=false] 是否在延迟开始前调用。默认 `false`。
     * @returns
     * @example
     * const [value, setValue] = useState('');
     * // 在 value 修改结束 500ms 后变化。
     * const debouncedValue = useDebounce(value, 500);
     */
    function useDebounce(value, wait, immediate) {
        if (wait === void 0) { wait = 0; }
        if (immediate === void 0) { immediate = false; }
        var _a = __read(react.useState(value), 2), state = _a[0], setState = _a[1];
        var run = useDebounceFn(setState, wait, immediate).run;
        react.useEffect(function () {
            run(value);
        }, [run, value]);
        return state;
    }

    /**
     * 用来处理节流函数的 Hook。
     *
     * @param {Function} fn 需要节流的函数。
     * @param {number} [wait=0] 节流等待时间，单位为毫秒。默认 `0`。
     * @param {boolean} [immediate=true] 是否在延迟开始前调用。默认 `true`。
     * @returns
     * @example
     * const [value, setValue] = useState(0);
     * // 频繁调用 run，但只会每隔 500ms 执行一次函数。
     * const { run } = useThrottleFn(setValue, 500);
     */
    function useThrottleFn(fn, wait, immediate) {
        if (wait === void 0) { wait = 0; }
        if (immediate === void 0) { immediate = true; }
        var refFn = useLatest(fn);
        var throttleRun = react.useRef(throttle(function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return refFn.current.apply(void 0, args);
        }, wait, immediate));
        useUnmount(function () {
            throttleRun.current.cancel();
        });
        return {
            run: throttleRun.current,
            cancel: throttleRun.current.cancel,
            flush: throttleRun.current.flush
        };
    }

    /**
     * 用来处理节流值的 Hook。
     *
     * @param {*} value 需要节流的值。
     * @param {number} [wait=0] 节流等待时间，单位为毫秒。默认 `0`。
     * @param {boolean} [immediate=true] 是否在延迟开始前调用。默认 `true`。
     * @returns
     * @example
     * const [value, setValue] = useState('');
     * // 频繁调用 setValue ， throttledValue 每隔 500ms 变化一次。
     * const throttledValue = useThrottle(value, 500);
     */
    function useThrottle(value, wait, immediate) {
        if (wait === void 0) { wait = 0; }
        if (immediate === void 0) { immediate = true; }
        var _a = __read(react.useState(value), 2), state = _a[0], setState = _a[1];
        var run = useThrottleFn(setState, wait, immediate).run;
        react.useEffect(function () {
            run(value);
        }, [run, value]);
        return state;
    }

    /**
     * 管理列表展示数量的 Hook。
     *
     * @param {Array} list 列表数据。
     * @param {Object} [options] 配置项。
     * @param {number} [options.count=3] 默认限制列表数量。默认 `3`。
     * @param {boolean} [options.defaultLimited=true] 默认是否限制列表数据。默认 `true`。
     * @returns
     * @example
     * const { data, limited, canLimit, toggle } = useLimitList(list);
     */
    function useLimitList(list, options) {
        if (list === void 0) { list = []; }
        if (options === void 0) { options = {}; }
        var _a = options || {}, _b = _a.count, count = _b === void 0 ? 3 : _b, _c = _a.defaultLimited, defaultLimited = _c === void 0 ? true : _c;
        var limitedRef = react.useRef(defaultLimited);
        var safeList = react.useMemo(function () { return (isArray(list) ? list : []); }, [list]);
        var safeCount = react.useMemo(function () { return (count > 0 ? Math.ceil(count) : 0); }, [count]);
        // 是否可以限制数量
        var canLimit = react.useMemo(function () { return safeList.length > safeCount; }, [safeCount, safeList.length]);
        // 限制后的值
        var _d = __read(react.useState(function () {
            if (canLimit && defaultLimited) {
                return safeList.slice(0, safeCount);
            }
            return safeList;
        }), 2), data = _d[0], setData = _d[1];
        // 切换限制/不限制数量
        var toggle = function () {
            if (canLimit) {
                limitedRef.current = !limitedRef.current;
            }
            setData(limitedRef.current ? safeList.slice(0, safeCount) : safeList);
        };
        // 修改 list 或 count 后，触发更新
        react.useEffect(function () {
            setData(limitedRef.current ? safeList.slice(0, safeCount) : safeList);
        }, [safeCount, safeList]);
        return {
            /**
             * 是否可以限制列表数量。当列表数量小于等于 `count` 时，为 `false`。
             */
            canLimit: canLimit,
            /**
             * 当前是否限制列表数据。
             */
            limited: limitedRef.current,
            /**
             * 列表数据。
             */
            data: data,
            /**
             * 切换限制列表数据。
             */
            toggle: toggle
        };
    }

    /**
     * 管理 object 类型 state 的 Hook ，用法和 class 组件的 `this.setState` 基本一致，内部使用展开操作符进行合并。
     *
     * @param {Object} initialValue 初始值。
     * @returns
     * @example
     * const [state, setState] = useSetState({
     *   foo: 0,
     *   count: 0,
     *   bar: undefined as string | undefined
     * });
     *
     * // 单独更新某个状态，不影响其他状态值
     * setState({
     *   foo: 1
     * });
     *
     * useEffect(()=>{
     *   console.log(state);
     *   // { foo: 1, count: 0, bar: undefined }
     * }, [state]);
     */
    function useSetState(initialValue) {
        var _a = __read(react.useState(initialValue), 2), state = _a[0], setState = _a[1];
        var set = react.useCallback(function (nextState) {
            setState(function (prevState) {
                var newState = nextState instanceof Function ? nextState(prevState) : nextState;
                return newState instanceof Object ? __assign(__assign({}, prevState), newState) : prevState;
            });
        }, []);
        return [state, set];
    }

    /**
     * 用于异步回调 或 dom 操作判断当前组件是否装载。
     *
     * 如果组件装载再去更新状态或操作，避免因组件卸载后更新状态而导致的内存泄漏。
     *
     * @returns 返回一个 `ref`。如果组件装载完成，值为 `true`。如果组件未装载完成或卸载，值为 `false`。
     * @example
     * const mountedRef = useMountedRef();
     */
    var useMountedRef = function () {
        var mountedRef = react.useRef(false);
        react.useEffect(function () {
            mountedRef.current = true;
            return function () {
                mountedRef.current = false;
            };
        }, []);
        return mountedRef;
    };

    /**
     * 返回上一次的 state 或 props 。
     *
     * @param state 需要记录变化的值。
     * @returns 上一次记录的值。
     * @example
     * const [value, setValue] = useState('');
     * // 上一次 state 的值。
     * const prevValue = usePrevious(value);
     */
    function usePrevious(state) {
        var mountedRef = useMountedRef();
        var prevRef = react.useRef();
        var curRef = react.useRef(state);
        if (mountedRef.current && curRef.current !== state) {
            prevRef.current = curRef.current;
            curRef.current = state;
        }
        return prevRef.current;
    }

    /**
     * 用于异步回调中判断当前组件是否卸载。
     *
     * 如果组件卸载就不更新状态，避免因组件卸载后更新状态而导致的内存泄漏。
     *
     * @returns 返回一个 `ref`。如果组件卸载，值为 `true`，否则值为 `false`。
     * @example
     * const unmountedRef = useUnmountedRef();
     */
    var useUnmountedRef = function () {
        var unmountedRef = react.useRef(false);
        react.useEffect(function () {
            unmountedRef.current = false;
            return function () {
                unmountedRef.current = true;
            };
        }, []);
        return unmountedRef;
    };

    function useSafeState(initialState) {
        var unmountedRef = useUnmountedRef();
        var _a = __read(react.useState(initialState), 2), state = _a[0], setState = _a[1];
        var setCurrentState = react.useCallback(function (nextState) {
            if (unmountedRef.current) {
                return;
            }
            setState(nextState);
        }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        []);
        return [state, setCurrentState];
    }

    /**
     * 只在组件 mount 时执行的 Hook。
     *
     * @param {Function} fn 组件 `mount` 时执行的函数。
     * @example
     * useMount(() => {
     *   console.log('mount');
     * });
     */
    var useMount = function (fn) {
        react.useEffect(function () {
            fn();
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
    };

    /**
     * 强制组件重新渲染的 Hook。
     *
     * 内部使用了 `useSafeState`，调用时如果组件已经卸载则不会触发。
     * @returns
     * @example
     * const update = useUpdate();
     */
    var useUpdate = function () {
        var _a = __read(useSafeState(0), 2), setState = _a[1];
        var update = react.useCallback(function () {
            setState(function (num) { return num + 1; });
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
        return update;
    };

    /**
     * 只在依赖更新时执行的 useLayoutEffect Hook。
     *
     * @param {Function} effect 可执行函数。
     * @param {Array} [deps] 可选项，传入依赖变化的对象。
     * @example
     * const [count, setCount] = useState(0);
     *
     * useUpdateLayoutEffect(() => {
     *   // 初次加载不触发，再更新后触发
     *   // do something
     *
     *   return () => {
     *     // 卸载时触发
     *   };
     * }, [count]);
     */
    var useUpdateLayoutEffect = function (effect, deps) {
        var isMounted = react.useRef(false);
        react.useLayoutEffect(function () {
            if (!isMounted.current) {
                isMounted.current = true;
            }
            else {
                return effect();
            }
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, deps);
    };

    function getRef(ref) {
        if (typeof ref === 'function') {
            // @ts-ignore
            return ref();
        }
        else if (typeof ref === 'object' && ref && 'current' in ref) {
            return ref.current;
        }
        else {
            return ref;
        }
    }

    /**
     * 管理目标元素外事件的 Hook。
     *
     * @param {Object} ref Dom 节点或 Ref 对象，支持数组。
     * @param {Function} onClickAway 触发事件的函数。
     * @param {string | string[]} [events='click'] 监听事件名称，支持数组。默认 `click`。
     * @example
     * const [count, setCount] = React.useState(0);
     * const ref = React.useRef<HTMLSpanElement>(null);
     *
     * useClickAway(ref, () => {
     *   setCount((c) => c + 1);
     * });
     *
     * return (
     *   <div>
     *     <span ref={ref}>
     *       <button>box</button>
     *     </span>
     *     <p>count: {count}</p>
     *   </div>
     * );
     */
    function useClickAway(ref, onClickAway, events) {
        if (events === void 0) { events = 'click'; }
        var refs = castArray(ref);
        var latestRefs = useLatest(refs);
        var refsIsFunc = refs.every(function (item) { return typeof item === 'function'; });
        var wrapperRefs = refsIsFunc ? latestRefs : refs;
        var onClickAwayRef = useLatest(onClickAway);
        var eventsArr = castArray(events);
        var eventsRef = useLatest(eventsArr);
        var eventsStr = eventsArr.join('');
        react.useEffect(function () {
            var handler = function (event) {
                var _a;
                var targets = refsIsFunc ? wrapperRefs.current : wrapperRefs;
                if (!targets.some(function (targetItem) {
                    var target = getRef(targetItem);
                    return !target || (target === null || target === void 0 ? void 0 : target.contains(event.target));
                })) {
                    (_a = onClickAwayRef.current) === null || _a === void 0 ? void 0 : _a.call(onClickAwayRef, event);
                }
            };
            var eventList = castArray(eventsRef.current);
            eventList.forEach(function (eventName) {
                document.addEventListener(eventName, handler);
            });
            return function () {
                eventList.forEach(function (eventName) {
                    document.removeEventListener(eventName, handler);
                });
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [wrapperRefs, refsIsFunc, eventsStr]);
    }

    /**
     * 组件状态即可以自己内部管理，也可以由外部控制。
     *
     * @param {Object} props 组件的 `props`。
     * @param {Object} [options] 配置项。
     * @param {*} [options.defaultValue] 默认值，会被 `props.defaultValue` 和 `props.value` 覆盖。
     * @param {string} [options.defaultValuePropName='defaultValue'] 默认值的属性名。默认 `defaultValue`。
     * @param {string} [options.valuePropName='value'] 值的属性名。默认 `value`。
     * @param {string} [options.trigger='onChange'] 修改值时，触发的函数名。默认 `onChange`。
     * @returns {Array}
     * @example
     * const [state, setState] = useControllableValue(props, {
     *   defaultValue: ''
     * });
     */
    function useControllableValue(props, options) {
        if (props === void 0) { props = {}; }
        if (options === void 0) { options = {}; }
        var defaultValue = options.defaultValue, _a = options.defaultValuePropName, defaultValuePropName = _a === void 0 ? 'defaultValue' : _a, _b = options.valuePropName, valuePropName = _b === void 0 ? 'value' : _b, _c = options.trigger, trigger = _c === void 0 ? 'onChange' : _c;
        var hasValueProp = valuePropName in props;
        var value = props[valuePropName];
        var _d = __read(react.useState(function () {
            if (hasValueProp) {
                return value;
            }
            if (defaultValuePropName in props) {
                return props[defaultValuePropName];
            }
            return defaultValue;
        }), 2), state = _d[0], setState = _d[1];
        useUpdateEffect(function () {
            if (hasValueProp) {
                setState(value);
            }
        }, [value, hasValueProp]);
        var handleSetState = react.useCallback(function (v) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (!hasValueProp) {
                setState(v);
            }
            if (props[trigger]) {
                props[trigger].apply(props, [v].concat(args));
            }
        }, [hasValueProp, props, trigger]);
        return [hasValueProp ? value : state, handleSetState];
    }

    // Minimum delay before invoking the update of observers.
    var REFRESH_DELAY = 50;
    // ref: https://github.com/que-etc/resize-observer-polyfill/blob/master/src/ResizeObserverController.js
    // A list of substrings of CSS properties used to find transition events that
    // might affect dimensions of observed elements.
    var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
    var defaultObserverOptions = {
        characterData: true, // 监视指定目标节点或子节点树中节点所包含的字符数据的变化
        childList: true, // 观察目标子节点的变化，是否有添加或者删除
        attributes: true, // 观察属性变动
        subtree: true // 观察后代节点，默认为 false
    };
    var ResizeObserver = /** @class */ (function () {
        function ResizeObserver(callback) {
            var _this = this;
            this.refresh = function () {
                if (_this.targetNode) {
                    _this.callback([
                        {
                            target: _this.targetNode
                        }
                    ], {});
                }
            };
            this.onTransitionEnd_ = function (_a) {
                var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;
                var isReflowProperty = transitionKeys.some(function (key) {
                    return propertyName.indexOf(key) > -1;
                });
                if (isReflowProperty) {
                    _this.throttleRefresh();
                }
            };
            this.observe = function (targetNode, options) {
                if (!isBrowser) {
                    return;
                }
                _this.targetNode = targetNode;
                document.addEventListener('transitionend', _this.onTransitionEnd_);
                window.addEventListener('resize', _this.throttleRefresh);
                _this.observer.observe(document, __assign(__assign({}, defaultObserverOptions), options));
            };
            this.disconnect = function () {
                if (!isBrowser) {
                    return;
                }
                _this.throttleRefresh.cancel();
                _this.targetNode = null;
                document.removeEventListener('transitionend', _this.onTransitionEnd_);
                window.removeEventListener('resize', _this.throttleRefresh);
                _this.observer.disconnect();
            };
            this.throttleRefresh = throttle(this.refresh, REFRESH_DELAY);
            this.targetNode = null;
            this.callback = callback;
            this.observer = new MutationObserver(this.throttleRefresh);
        }
        return ResizeObserver;
    }());

    /**
     * 获取并监听 dom 节点的宽高。
     *
     * @param {Object} ref `dom` 节点引用。
     * @returns {Object} 返回 `dom` 节点的宽高。
     * @example
     * const ref = useRef<HTMLDivElement>(null);
     * const size = useSize(ref);
     *
     * return (
     *   <>
     *     <h1 ref={ref}>Hello, world</h1>
     *     <p>rect value: {JSON.stringify(size)}</p>
     *   </>
     * );
     */
    function useSize(ref) {
        var latestRef = useLatest(ref);
        var refIsFunc = typeof ref === 'function';
        var wrapperRef = refIsFunc ? latestRef : ref;
        var _a = __read(react.useState(function () {
            var target = getRef(ref);
            return {
                width: target === null || target === void 0 ? void 0 : target.clientWidth,
                height: target === null || target === void 0 ? void 0 : target.clientHeight
            };
        }), 2), size = _a[0], setSize = _a[1];
        react.useEffect(function () {
            var target = getRef(refIsFunc ? wrapperRef.current : wrapperRef);
            function refresh(el) {
                if (el) {
                    setSize({
                        width: el.clientWidth,
                        height: el.clientHeight
                    });
                }
            }
            if (!target) {
                return function () { };
            }
            refresh(target);
            var observer = new ResizeObserver(function (mutationsList) {
                mutationsList.forEach(function (mutation) {
                    refresh(mutation.target);
                });
            });
            observer.observe(target);
            return function () {
                observer.disconnect();
            };
        }, [wrapperRef, refIsFunc]);
        return size;
    }

    exports.clearCache = clearCache;
    exports.useAsync = useAsync;
    exports.useClickAway = useClickAway;
    exports.useControllableValue = useControllableValue;
    exports.useDebounce = useDebounce;
    exports.useDebounceFn = useDebounceFn;
    exports.useLatest = useLatest;
    exports.useLimitList = useLimitList;
    exports.useLoadMore = useLoadMore;
    exports.useMount = useMount;
    exports.useMountedRef = useMountedRef;
    exports.usePagination = usePagination;
    exports.usePersistFn = usePersistFn;
    exports.usePrevious = usePrevious;
    exports.useSafeState = useSafeState;
    exports.useSetState = useSetState;
    exports.useSize = useSize;
    exports.useThrottle = useThrottle;
    exports.useThrottleFn = useThrottleFn;
    exports.useUnmount = useUnmount;
    exports.useUnmountedRef = useUnmountedRef;
    exports.useUpdate = useUpdate;
    exports.useUpdateEffect = useUpdateEffect;
    exports.useUpdateLayoutEffect = useUpdateLayoutEffect;

}));
//# sourceMappingURL=rcHooks.js.map
