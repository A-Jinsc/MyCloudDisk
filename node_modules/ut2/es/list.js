import identity from './identity.js';
import { MAX_SAFE_INTEGER, mathMin, mathFloor, MAX_ARRAY_LENGTH } from './internals/native.js';
import isInteger from './isInteger.js';
import isFinite from './isFinite.js';

var list = function (n, iteratee) {
    if (iteratee === void 0) { iteratee = identity; }
    if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
    }
    var index = 0;
    var length = mathMin(isInteger(n) ? n : mathFloor(isFinite(n) ? n : 0), MAX_ARRAY_LENGTH);
    var result = Array(length);
    var func = typeof iteratee === 'function' ? iteratee : identity;
    while (index < length) {
        result[index] = func(index);
        index++;
    }
    return result;
};

export { list as default };
